(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/thirdweb/dist/esm/utils/hashing/sha256.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sha256": (()=>sha256)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/@noble/hashes/esm/sha256.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js [app-client] (ecmascript)");
;
;
function sha256(value, to) {
    const bytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(value, {
        strict: false
    }) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToUint8Array"])(value) : value);
    if (to === "bytes") {
        return bytes;
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["uint8ArrayToHex"])(bytes);
} //# sourceMappingURL=sha256.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/client-id.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "computeClientIdFromSecretKey": (()=>computeClientIdFromSecretKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$caching$2f$lru$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/caching/lru.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/hashing/sha256.js [app-client] (ecmascript)");
;
;
;
const cache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$caching$2f$lru$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LruMap"](4096);
function computeClientIdFromSecretKey(secretKey) {
    if (cache.has(secretKey)) {
        return cache.get(secretKey);
    }
    // we slice off the leading `0x` and then take the first 32 chars
    const cId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$sha256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sha256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBytes"])(secretKey)).slice(2, 34);
    cache.set(secretKey, cId);
    return cId;
} //# sourceMappingURL=client-id.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/web/isMobile.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isAndroid": (()=>isAndroid),
    "isIOS": (()=>isIOS),
    "isMobile": (()=>isMobile)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$detect$2d$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/detect-platform.js [app-client] (ecmascript)");
;
function isAndroid() {
    // can only detect if useragent is defined
    if (typeof navigator === "undefined") {
        return false;
    }
    const os = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$detect$2d$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["detectOS"])(navigator.userAgent);
    return os ? os.toLowerCase().includes("android") : false;
}
function isIOS() {
    // can only detect if useragent is defined
    if (typeof navigator === "undefined") {
        return false;
    }
    const os = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$detect$2d$platform$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["detectOS"])(navigator.userAgent);
    return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}
function isMobile() {
    return isAndroid() || isIOS();
} //# sourceMappingURL=isMobile.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/web/openWindow.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "openWindow": (()=>openWindow)
});
function openWindow(uri) {
    const isInsideIframe = window !== window.top;
    if (isInsideIframe) {
        window.open(uri);
    } else {
        if (uri.startsWith("http")) {
            // taken from for https://github.com/rainbow-me/rainbowkit/
            // Using 'window.open' causes issues on iOS in non-Safari browsers and
            // WebViews where a blank tab is left behind after connecting.
            // This is especially bad in some WebView scenarios (e.g. following a
            // link from Twitter) where the user doesn't have any mechanism for
            // closing the blank tab.
            // For whatever reason, links with a target of "_blank" don't suffer
            // from this problem, and programmatically clicking a detached link
            // element with the same attributes also avoids the issue.
            const link = document.createElement("a");
            link.href = uri;
            link.target = "_blank";
            link.rel = "noreferrer noopener";
            link.click();
        } else {
            window.location.href = uri;
        }
    }
} //# sourceMappingURL=openWindow.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/signatures/helpers/parse-typed-data.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseTypedData": (()=>parseTypedData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ox/_esm/core/Hex.js [app-client] (ecmascript)");
;
function parseTypedData(typedData) {
    const domain = typedData.domain;
    if (domain?.chainId !== undefined && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["validate"])(domain.chainId)) {
        typedData.domain = {
            ...typedData.domain,
            chainId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toNumber"])(typedData.domain.chainId)
        };
    }
    return typedData;
} //# sourceMappingURL=parse-typed-data.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/platform.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isBrowser": (()=>isBrowser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
function isReactNative() {
    return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
}
function isNode() {
    return typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].versions !== "undefined" && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].versions.node !== "undefined";
}
function isBrowser() {
    return !isReactNative() && !isNode();
} //# sourceMappingURL=platform.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/timeoutPromise.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Timeout a promise with a given Error message if the promise does not resolve in given time
 * @internal
 */ __turbopack_context__.s({
    "timeoutPromise": (()=>timeoutPromise)
});
function timeoutPromise(promise, option) {
    return new Promise((resolve, reject)=>{
        const timeoutId = setTimeout(()=>{
            reject(new Error(option.message));
        }, option.ms);
        promise.then((res)=>{
            clearTimeout(timeoutId);
            resolve(res);
        }, (err)=>{
            clearTimeout(timeoutId);
            reject(err);
        });
    });
} //# sourceMappingURL=timeoutPromise.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/byte-size.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "byteSize": (()=>byteSize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js [app-client] (ecmascript)");
;
function byteSize(value) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(value, {
        strict: false
    })) {
        return Math.ceil((value.length - 2) / 2);
    }
    return value.length;
} //# sourceMappingURL=byte-size.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "encodeAbiParameters": (()=>encodeAbiParameters),
    "encodeAddress": (()=>encodeAddress),
    "prepareParam": (()=>prepareParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ox/_esm/core/Hex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/byte-size.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
;
;
;
function encodeAbiParameters(params, values) {
    if (params.length !== values.length) {
        throw new Error("The number of parameters and values must match.");
    }
    // Prepare the parameters to determine dynamic types to encode.
    const preparedParams = prepareParams({
        params: params,
        values
    });
    const data = encodeParams(preparedParams);
    if (data.length === 0) {
        return "0x";
    }
    return data;
}
function prepareParams({ params, values }) {
    const preparedParams = [];
    for(let i = 0; i < params.length; i++){
        // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
        preparedParams.push(prepareParam({
            param: params[i],
            value: values[i]
        }));
    }
    return preparedParams;
}
function prepareParam({ param, value }) {
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents) {
        const [length, type] = arrayComponents;
        return encodeArray(value, {
            length,
            param: {
                ...param,
                type
            }
        });
    }
    if (param.type === "tuple") {
        return encodeTuple(value, {
            param: param
        });
    }
    if (param.type === "address") {
        return encodeAddress(value);
    }
    if (param.type === "bool") {
        return encodeBool(value);
    }
    if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        const signed = param.type.startsWith("int");
        return encodeNumber(value, {
            signed
        });
    }
    if (param.type.startsWith("bytes")) {
        return encodeBytes(value, {
            param
        });
    }
    if (param.type === "string") {
        return encodeString(value);
    }
    throw new Error(`Unsupported parameter type: ${param.type}`);
}
function encodeParams(preparedParams) {
    // 1. Compute the size of the static part of the parameters.
    let staticSize = 0;
    for(let i = 0; i < preparedParams.length; i++){
        // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic) {
            staticSize += 32;
        } else {
            staticSize += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["byteSize"])(encoded);
        }
    }
    // 2. Split the parameters into static and dynamic parts.
    const staticParams = [];
    const dynamicParams = [];
    let dynamicSize = 0;
    for(let i = 0; i < preparedParams.length; i++){
        // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic) {
            staticParams.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(staticSize + dynamicSize, {
                size: 32
            }));
            dynamicParams.push(encoded);
            dynamicSize += (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["byteSize"])(encoded);
        } else {
            staticParams.push(encoded);
        }
    }
    // 3. Concatenate static and dynamic parts.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...[
        ...staticParams,
        ...dynamicParams
    ]);
}
function encodeAddress(value) {
    // We allow empty strings for deployment transactions where there is no to address
    if (value !== "" && value !== undefined && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAddress"])(value)) {
        throw new Error(`Invalid address: ${value}`);
    }
    return {
        dynamic: false,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])(value.toLowerCase())
    };
}
function encodeArray(value, { length, param }) {
    const dynamic = length === null;
    if (!Array.isArray(value)) {
        throw new Error("Invalid array value.");
    }
    if (!dynamic && value.length !== length) {
        throw new Error("Invalid array length.");
    }
    let dynamicChild = false;
    const preparedParams = [];
    for(let i = 0; i < value.length; i++){
        const preparedParam = prepareParam({
            param,
            value: value[i]
        });
        if (preparedParam.dynamic) {
            dynamicChild = true;
        }
        preparedParams.push(preparedParam);
    }
    if (dynamic || dynamicChild) {
        const data = encodeParams(preparedParams);
        if (dynamic) {
            const length_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(preparedParams.length, {
                size: 32
            });
            return {
                dynamic: true,
                encoded: preparedParams.length > 0 ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...[
                    length_,
                    data
                ]) : length_
            };
        }
        if (dynamicChild) {
            return {
                dynamic: true,
                encoded: data
            };
        }
    }
    return {
        dynamic: false,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...preparedParams.map(({ encoded })=>encoded))
    };
}
function encodeBytes(value, { param }) {
    const [, paramSize] = param.type.split("bytes");
    const bytesSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["byteSize"])(value);
    if (!paramSize) {
        let value_ = value;
        // If the size is not divisible by 32 bytes, pad the end
        // with empty bytes to the ceiling 32 bytes.
        if (bytesSize % 32 !== 0) {
            value_ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])(value_, {
                dir: "right",
                size: Math.ceil((value.length - 2) / 2 / 32) * 32
            });
        }
        return {
            dynamic: true,
            encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...[
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(bytesSize, {
                    size: 32
                })),
                value_
            ])
        };
    }
    if (bytesSize !== Number.parseInt(paramSize)) {
        throw new Error(`Invalid bytes${paramSize} size: ${bytesSize}`);
    }
    return {
        dynamic: false,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])(value, {
            dir: "right"
        })
    };
}
function encodeBool(value) {
    return {
        dynamic: false,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["boolToHex"])(value))
    };
}
function encodeNumber(value, { signed }) {
    return {
        dynamic: false,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(value, {
            size: 32,
            signed
        })
    };
}
function encodeString(value) {
    const hexValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["stringToHex"])(value);
    const partsLength = Math.ceil((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["byteSize"])(hexValue) / 32);
    const parts = [];
    for(let i = 0; i < partsLength; i++){
        parts.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["slice"])(hexValue, i * 32, (i + 1) * 32), {
            dir: "right"
        }));
    }
    return {
        dynamic: true,
        encoded: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...[
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["padHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$byte$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["byteSize"])(hexValue), {
                size: 32
            })),
            ...parts
        ])
    };
}
function encodeTuple(value, { param }) {
    let dynamic = false;
    const preparedParams = [];
    for(let i = 0; i < param.components.length; i++){
        // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
        const param_ = param.components[i];
        const index = Array.isArray(value) ? i : param_.name;
        const preparedParam = prepareParam({
            param: param_,
            // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
            // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any
            value: value[index]
        });
        preparedParams.push(preparedParam);
        if (preparedParam.dynamic) {
            dynamic = true;
        }
    }
    return {
        dynamic,
        encoded: dynamic ? encodeParams(preparedParams) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...preparedParams.map(({ encoded })=>encoded))
    };
}
function getArrayComponents(type) {
    const matches = type.match(/^(.*)\[(\d+)?\]$/);
    return matches ? // biome-ignore lint/style/noNonNullAssertion: we know the value is not `undefined`.
    [
        matches[2] ? Number(matches[2]) : null,
        matches[1]
    ] : undefined;
} //# sourceMappingURL=encodeAbiParameters.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/abi/prepare-method.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "prepareMethod": (()=>prepareMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toFunctionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/hash/toFunctionSelector.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$caching$2f$lru$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/caching/lru.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript)");
;
;
;
;
const prepareMethodCache = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$caching$2f$lru$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LruMap"](4096);
function prepareMethod(method) {
    const key = typeof method === "string" ? method : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(method);
    if (prepareMethodCache.has(key)) {
        return prepareMethodCache.get(key);
    }
    const abiFn = typeof method === "string" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseAbiItem"])(method) : method;
    // encode the method signature
    const sig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toFunctionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFunctionSelector"])(abiFn);
    const ret = [
        sig,
        abiFn.inputs,
        abiFn.outputs
    ];
    prepareMethodCache.set(key, ret);
    return ret;
} //# sourceMappingURL=prepare-method.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Resolves a possibly asynchronous value.
 * If the value is a function that returns a promise, it will be awaited and the resolved value will be returned.
 * Otherwise, the value itself will be returned.
 *
 * @param value - The value to resolve.
 * @returns A promise that resolves to the resolved value.
 * @internal
 */ __turbopack_context__.s({
    "resolvePromisedValue": (()=>resolvePromisedValue)
});
async function resolvePromisedValue(value) {
    // @ts-expect-error - this works fine, but TS doesn't like it since 5.8
    return typeof value === "function" ? await value() : value;
} //# sourceMappingURL=resolve-promised-value.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/units.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Converts a given number of units to a string representation with a specified number of decimal places.
 * @param units - The number of units to convert.
 * @param decimals - The number of decimal places to include in the string representation.
 * @returns The string representation of the converted units.
 * @example
 * ```ts
 * import { toTokens } from "thirdweb/utils";
 * toTokens(1000000000000000000n, 18)
 * // '1'
 * ```
 * @utils
 */ __turbopack_context__.s({
    "fromGwei": (()=>fromGwei),
    "toEther": (()=>toEther),
    "toTokens": (()=>toTokens),
    "toUnits": (()=>toUnits),
    "toWei": (()=>toWei)
});
function toTokens(units, decimals) {
    // Convert to string once and handle negativity.
    const stringValue = units.toString();
    const prefix = stringValue[0] === "-" ? "-" : "";
    // Abusing that string "-" is truthy
    const absStringValue = prefix ? stringValue.slice(1) : stringValue;
    // Ensure we have enough digits for the fractional part.
    const paddedValue = absStringValue.padStart(decimals + 1, "0");
    const splitIndex = paddedValue.length - decimals;
    // Extract integer and fraction parts directly.
    const integerPart = paddedValue.slice(0, splitIndex) || "0";
    let fractionPart = paddedValue.slice(splitIndex);
    // Manually trim trailing zeros from the fraction part.
    for(let i = fractionPart.length - 1; i >= 0; i--){
        if (fractionPart[i] !== "0") {
            fractionPart = fractionPart.slice(0, i + 1);
            break;
        }
        // check if the next digit is a zero also
        // If all zeros, make fraction part empty
        if (i === 0) {
            fractionPart = "";
        }
    }
    // Construct and return the formatted string.
    return `${prefix}${integerPart}${fractionPart ? `.${fractionPart}` : ""}`;
}
function toEther(wei) {
    return toTokens(wei, 18);
}
function toUnits(tokens, decimals) {
    let [integerPart, fractionPart = ""] = tokens.split(".");
    const prefix = integerPart.startsWith("-") ? "-" : "";
    if (prefix) {
        integerPart = integerPart.slice(1);
    }
    fractionPart = fractionPart.padEnd(decimals, "0"); // Ensure fraction part is at least 'decimals' long.
    if (decimals === 0) {
        // Check if there's any fraction part that would necessitate rounding up the integer part.
        if (fractionPart[0] && Number.parseInt(fractionPart[0]) >= 5) {
            integerPart = (BigInt(integerPart) + 1n).toString();
        }
        fractionPart = ""; // No fraction part is needed when decimals === 0.
    } else {
        // When decimals > 0, handle potential rounding based on the digit right after the specified decimal places.
        if (fractionPart.length > decimals) {
            const roundingDigit = fractionPart[decimals];
            if (roundingDigit && Number.parseInt(roundingDigit, 10) >= 5) {
                // If rounding is needed, add 1 to the last included digit of the fraction part.
                const roundedFraction = BigInt(fractionPart.substring(0, decimals)) + 1n;
                fractionPart = roundedFraction.toString().padStart(decimals, "0");
                if (fractionPart.length > decimals) {
                    // If rounding the fraction results in a length increase (e.g., .999 -> 1.000), increment the integer part.
                    integerPart = (BigInt(integerPart) + 1n).toString();
                    // Adjust the fraction part if it's longer than the specified decimals due to rounding up.
                    fractionPart = fractionPart.substring(fractionPart.length - decimals);
                }
            } else {
                // If no rounding is necessary, just truncate the fraction part to the specified number of decimals.
                fractionPart = fractionPart.substring(0, decimals);
            }
        }
    // If the fraction part is shorter than the specified decimals, it's already handled by padEnd() above.
    }
    // Combine the integer and fraction parts into the final BigInt representation.
    return BigInt(`${prefix}${integerPart}${fractionPart}`);
}
function toWei(tokens) {
    return toUnits(tokens, 18);
}
function fromGwei(gwei) {
    return toUnits(gwei, 9);
} //# sourceMappingURL=units.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ipfs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "findIPFSCidFromUri": (()=>findIPFSCidFromUri),
    "getBaseUriFromBatch": (()=>getBaseUriFromBatch),
    "resolveScheme": (()=>resolveScheme),
    "uploadOrExtractURIs": (()=>uploadOrExtractURIs)
});
const DEFAULT_GATEWAY = "https://{clientId}.ipfscdn.io/ipfs/{cid}";
function resolveScheme(options) {
    if (options.uri.startsWith("ipfs://")) {
        const gateway = options.client.config?.storage?.gatewayUrl ?? DEFAULT_GATEWAY;
        const clientId = options.client.clientId;
        const cid = findIPFSCidFromUri(options.uri);
        let bundleId = undefined;
        if (typeof globalThis !== "undefined" && "Application" in globalThis) {
            // shims use wallet connect RN module which injects Application info in globalThis
            // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing
            bundleId = globalThis.Application.applicationId;
        }
        // purposefully using SPLIT here and not replace for CID to avoid cases where users don't know the schema
        // also only splitting on `/ipfs` to avoid cases where people pass non `/` terminated gateway urls
        return `${gateway.replace("{clientId}", clientId).split("/ipfs")[0]}/ipfs/${cid}${bundleId ? `?bundleId=${bundleId}` : ""}`;
    }
    if (options.uri.startsWith("http")) {
        return options.uri;
    }
    throw new Error(`Invalid URI scheme, expected "ipfs://" or "http(s)://"`);
}
function findIPFSCidFromUri(uri) {
    if (!uri.startsWith("ipfs://")) {
        // do not touch URIs that are not ipfs URIs
        return uri;
    }
    // first index of `/Qm` or `/bafy` in the uri (case insensitive)
    const firstIndex = uri.search(/\/(Qm|baf)/i);
    // we start one character after the first `/` to avoid including it in the CID
    return uri.slice(firstIndex + 1);
}
async function uploadOrExtractURIs(files, client, startNumber) {
    if (isUriList(files)) {
        return files;
    }
    if (isMetadataList(files)) {
        const { upload } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/storage/upload.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const uris = await upload({
            client,
            files,
            rewriteFileNames: {
                fileStartNumber: startNumber || 0
            }
        });
        return Array.isArray(uris) ? uris : [
            uris
        ];
    }
    throw new Error("Files must all be of the same type (all URI or all FileOrBufferOrString)");
}
function getBaseUriFromBatch(uris) {
    // biome-ignore lint/style/noParameterAssign: lemme do my stuff
    uris = Array.isArray(uris) ? uris : [
        uris
    ];
    const [base, ...rest] = uris.map((uri)=>{
        // remove query parameters
        // biome-ignore lint/style/noParameterAssign: lemme do my stuff
        [uri] = uri.split("?");
        // remove fragments
        // biome-ignore lint/style/noParameterAssign: lemme do my stuff
        [uri] = uri.split("#");
        // if the URI ends with a `/`, remove it
        if (uri.endsWith("/")) {
            // biome-ignore lint/style/noParameterAssign: lemme do my stuff
            uri = uri.slice(0, -1);
        }
        // remove the last part of the URI & add the trailing `/`
        return `${uri.split("/").slice(0, -1).join("/")}/`;
    });
    if (!base) {
        throw new Error("Batch of URIs is empty");
    }
    if (rest.some((uri)=>uri !== base)) {
        throw new Error("All URIs in the batch must have the same base URI");
    }
    return base;
}
function isUriList(metadatas) {
    return metadatas.every((m)=>typeof m === "string");
}
function isMetadataList(metadatas) {
    return metadatas.every((m)=>typeof m !== "string");
} //# sourceMappingURL=ipfs.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/random.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "randomBytesBuffer": (()=>randomBytesBuffer),
    "randomBytesHex": (()=>randomBytesHex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
function randomBytesHex(length = 32) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["uint8ArrayToHex"])(randomBytesBuffer(length));
}
function randomBytesBuffer(length = 32) {
    return globalThis.crypto.getRandomValues(new Uint8Array(length));
} //# sourceMappingURL=random.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/promise/once.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "once": (()=>once)
});
function once(fn) {
    let result;
    return ()=>{
        if (!result) {
            result = fn();
        }
        return result;
    };
} //# sourceMappingURL=once.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "detectMethod": (()=>detectMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toFunctionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/hash/toFunctionSelector.js [app-client] (ecmascript)");
;
function detectMethod(options) {
    const fnSelector = Array.isArray(options.method) ? options.method[0] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toFunctionSelector$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toFunctionSelector"])(options.method);
    return options.availableSelectors.includes(fnSelector);
} //# sourceMappingURL=detectExtension.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/bigint.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "max": (()=>max),
    "min": (()=>min),
    "replaceBigInts": (()=>replaceBigInts),
    "toBigInt": (()=>toBigInt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
function min(a, b) {
    return a < b ? a : b;
}
function max(a, b) {
    return a > b ? a : b;
}
function toBigInt(value) {
    if ([
        "string",
        "number"
    ].includes(typeof value) && !Number.isInteger(Number(value))) {
        throw new Error(`Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`);
    }
    if (value instanceof Uint8Array) {
        return BigInt((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["uint8ArrayToHex"])(value));
    }
    return BigInt(value);
}
const replaceBigInts = (obj, replacer)=>{
    if (typeof obj === "bigint") return replacer(obj);
    if (Array.isArray(obj)) return obj.map((x)=>replaceBigInts(x, replacer));
    if (obj && typeof obj === "object") return Object.fromEntries(Object.entries(obj).map(([k, v])=>[
            k,
            replaceBigInts(v, replacer)
        ]));
    return obj;
}; //# sourceMappingURL=bigint.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/date.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dateToSeconds": (()=>dateToSeconds),
    "tenYearsFromNow": (()=>tenYearsFromNow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/bigint.js [app-client] (ecmascript)");
;
function tenYearsFromNow() {
    return new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10); // 10 years
}
function dateToSeconds(date) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBigInt"])(Math.floor(date.getTime() / 1000));
} //# sourceMappingURL=date.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/config.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "clearTransactionDecorator": (()=>clearTransactionDecorator),
    "getTransactionDecorator": (()=>getTransactionDecorator),
    "setTransactionDecorator": (()=>setTransactionDecorator)
});
let transactionDecorator = null;
function setTransactionDecorator(decoratorFunction) {
    transactionDecorator = decoratorFunction;
}
function clearTransactionDecorator() {
    transactionDecorator = null;
}
function getTransactionDecorator() {
    return transactionDecorator;
} //# sourceMappingURL=config.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/concat-hex.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "concatHex": (()=>concatHex)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ox/_esm/core/Hex.js [app-client] (ecmascript)");
;
function concatHex(values) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(...values);
} //# sourceMappingURL=concat-hex.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "maxUint96": (()=>maxUint96)
});
const maxUint96 = 2n ** 96n - 1n; //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/nft/parseNft.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseNFT": (()=>parseNFT),
    "parseNftUri": (()=>parseNftUri)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/contract/contract.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
;
;
;
function parseNFT(base, options) {
    switch(options.type){
        case "ERC721":
            return {
                metadata: base,
                owner: options?.owner ?? null,
                id: options.tokenId,
                tokenURI: options.tokenUri,
                type: options.type,
                tokenAddress: options.tokenAddress,
                chainId: options.chainId
            };
        case "ERC1155":
            return {
                metadata: base,
                owner: options?.owner ?? null,
                id: options.tokenId,
                tokenURI: options.tokenUri,
                type: options.type,
                supply: options.supply,
                tokenAddress: options.tokenAddress,
                chainId: options.chainId
            };
        default:
            throw new Error("Invalid NFT type");
    }
}
async function parseNftUri(options) {
    let uri = options.uri;
    // parse valid nft spec (CAIP-22/CAIP-29)
    // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs
    if (uri.startsWith("did:nft:")) {
        // convert DID to CAIP
        uri = uri.replace("did:nft:", "").replace(/_/g, "/");
    }
    const [reference = "", asset_namespace = "", tokenID = ""] = uri.split("/");
    const [eip_namespace, chainID] = reference.split(":");
    const [erc_namespace, contractAddress] = asset_namespace.split(":");
    if (!eip_namespace || eip_namespace.toLowerCase() !== "eip155") {
        throw new Error(`Invalid EIP namespace, expected EIP155, got: "${eip_namespace}"`);
    }
    if (!chainID) {
        throw new Error("Chain ID not found");
    }
    if (!contractAddress || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAddress"])(contractAddress)) {
        throw new Error("Contract address not found");
    }
    if (!tokenID) {
        throw new Error("Token ID not found");
    }
    const chain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCachedChain"])(Number(chainID));
    const contract = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getContract"])({
        client: options.client,
        chain,
        address: contractAddress
    });
    switch(erc_namespace){
        case "erc721":
            {
                const { getNFT } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/erc721/read/getNFT.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
                const nft = await getNFT({
                    contract,
                    tokenId: BigInt(tokenID)
                });
                return nft.metadata.image ?? null;
            }
        case "erc1155":
            {
                const { getNFT } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
                const nft = await getNFT({
                    contract,
                    tokenId: BigInt(tokenID)
                });
                return nft.metadata.image ?? null;
            }
        default:
            {
                throw new Error(`Invalid ERC namespace, expected ERC721 or ERC1155, got: "${erc_namespace}"`);
            }
    }
} //# sourceMappingURL=parseNft.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/avatar.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseAvatarRecord": (()=>parseAvatarRecord)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ipfs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/ipfs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$nft$2f$parseNft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/nft/parseNft.js [app-client] (ecmascript)");
;
;
;
async function parseAvatarRecord(options) {
    let uri = options.uri;
    if (/eip155:/i.test(options.uri)) {
        // do nft uri parsing
        uri = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$nft$2f$parseNft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseNftUri"])(options);
    }
    if (!uri) {
        return null;
    }
    const resolvedScheme = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ipfs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolveScheme"])({
        client: options.client,
        uri
    });
    // check if it's an image
    if (await isImageUri({
        client: options.client,
        uri: resolvedScheme
    })) {
        return resolvedScheme;
    }
    return null;
}
async function isImageUri(options) {
    try {
        const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClientFetch"])(options.client)(options.uri, {
            method: "HEAD"
        });
        // retrieve content type header to check if content is image
        if (res.status === 200) {
            const contentType = res.headers.get("content-type");
            return !!contentType?.startsWith("image/");
        }
        return false;
    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any
    } catch (error) {
        // if error is not cors related then fail
        if (typeof error === "object" && typeof error.response !== "undefined") {
            return false;
        }
        // fail in NodeJS, since the error is not cors but any other network issue
        if (!Object.hasOwn(globalThis, "Image")) {
            return false;
        }
        // in case of cors, use image api to validate if given url is an actual image
        return new Promise((resolve)=>{
            const img = new Image();
            img.onload = ()=>{
                resolve(true);
            };
            img.onerror = ()=>{
                resolve(false);
            };
            img.src = options.uri;
        });
    }
} //# sourceMappingURL=avatar.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/encodeLabelToLabelhash.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "encodedLabelToLabelhash": (()=>encodedLabelToLabelhash)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js [app-client] (ecmascript)");
;
function encodedLabelToLabelhash(label) {
    if (label.length !== 66) {
        return null;
    }
    if (label.indexOf("[") !== 0) {
        return null;
    }
    if (label.indexOf("]") !== 65) {
        return null;
    }
    const hash = `0x${label.slice(1, 65)}`;
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(hash)) {
        return null;
    }
    return hash;
} //# sourceMappingURL=encodeLabelToLabelhash.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/namehash.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "namehash": (()=>namehash)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/encoding/toHex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/data/concat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/hashing/keccak256.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ens$2f$encodeLabelToLabelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/ens/encodeLabelToLabelhash.js [app-client] (ecmascript)");
;
;
;
;
function namehash(name) {
    let result = new Uint8Array(32).fill(0);
    if (!name) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bytesToHex"])(result);
    }
    const labels = name.split(".");
    // Iterate in reverse order building up hash
    for(let i = labels.length - 1; i >= 0; i -= 1){
        const item = labels[i];
        const hashFromEncodedLabel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ens$2f$encodeLabelToLabelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodedLabelToLabelhash"])(item);
        const hashed = hashFromEncodedLabel ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBytes"])(hashFromEncodedLabel) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBytes"])(item), "bytes");
        result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$hashing$2f$keccak256$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])([
            result,
            hashed
        ]), "bytes");
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toHex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bytesToHex"])(result);
} //# sourceMappingURL=namehash.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/encodeLabelhash.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "encodeLabelhash": (()=>encodeLabelhash)
});
function encodeLabelhash(hash) {
    return `[${hash.slice(2)}]`;
} //# sourceMappingURL=encodeLabelhash.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/packetToBytes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "packetToBytes": (()=>packetToBytes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$ens$2f$labelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/ens/labelhash.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ens$2f$encodeLabelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/ens/encodeLabelhash.js [app-client] (ecmascript)");
;
;
;
function packetToBytes(packet) {
    // strip leading and trailing `.`
    const value = packet.replace(/^\.|\.$/gm, "");
    if (value.length === 0) {
        return new Uint8Array(1);
    }
    const bytes = new Uint8Array((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBytes"])(value).byteLength + 2);
    let offset = 0;
    const list = value.split(".");
    for(let i = 0; i < list.length; i++){
        const item = list[i];
        let encoded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBytes"])(item);
        // if the length is > 255, make the encoded label value a labelhash
        // this is compatible with the universal resolver
        if (encoded.byteLength > 255) {
            encoded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringToBytes"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ens$2f$encodeLabelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodeLabelhash"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$ens$2f$labelhash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["labelhash"])(item)));
        }
        bytes[offset] = encoded.length;
        bytes.set(encoded, offset + 1);
        offset += encoded.length + 1;
    }
    if (bytes.byteLength !== offset + 1) {
        return bytes.slice(0, offset + 1);
    }
    return bytes;
} //# sourceMappingURL=packetToBytes.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/promise/wait.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Waits for the specified number of milliseconds.
 * @param ms - The number of milliseconds to wait.
 * @returns A promise that resolves after the specified time.
 * @internal
 */ __turbopack_context__.s({
    "wait": (()=>wait)
});
function wait(ms) {
    return new Promise((resolve)=>{
        setTimeout(resolve, ms);
    });
} //# sourceMappingURL=wait.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/url.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "formatExplorerAddressUrl": (()=>formatExplorerAddressUrl),
    "formatExplorerTxUrl": (()=>formatExplorerTxUrl),
    "formatNativeUrl": (()=>formatNativeUrl),
    "formatUniversalUrl": (()=>formatUniversalUrl),
    "formatWalletConnectUrl": (()=>formatWalletConnectUrl),
    "isHttpUrl": (()=>isHttpUrl)
});
function isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
}
function formatUniversalUrl(appUrl, wcUri) {
    if (!isHttpUrl(appUrl)) {
        return formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
        safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
        redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
        href: safeAppUrl
    };
}
function formatNativeUrl(appUrl, wcUri) {
    if (isHttpUrl(appUrl)) {
        return formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.includes("://")) {
        safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
        safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
        safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
        redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
        href: safeAppUrl
    };
}
function formatWalletConnectUrl(appUrl, wcUri) {
    return isHttpUrl(appUrl) ? formatUniversalUrl(appUrl, wcUri) : formatNativeUrl(appUrl, wcUri);
}
function formatExplorerTxUrl(explorerUrl, txHash) {
    return `${explorerUrl.endsWith("/") ? explorerUrl : `${explorerUrl}/`}tx/${txHash}`;
}
function formatExplorerAddressUrl(explorerUrl, address) {
    return `${explorerUrl.endsWith("/") ? explorerUrl : `${explorerUrl}/`}address/${address}`;
} //# sourceMappingURL=url.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/promise/p-limit.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// source code of yocto-queue + modified to add types
// https://github.com/sindresorhus/yocto-queue
__turbopack_context__.s({
    "Queue": (()=>Queue),
    "pLimit": (()=>pLimit)
});
class Node {
    constructor(value){
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "next", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.value = value;
    }
}
class Queue {
    constructor(){
        Object.defineProperty(this, "head", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.clear();
        this.size = 0;
    }
    enqueue(value) {
        const node = new Node(value);
        if (this.head) {
            if (this.tail) {
                this.tail.next = node;
            }
            this.tail = node;
        } else {
            this.head = node;
            this.tail = node;
        }
        this.size++;
    }
    dequeue() {
        const current = this.head;
        if (!current) {
            return;
        }
        this.head = this.head?.next;
        this.size--;
        return current.value;
    }
    clear() {
        this.head = undefined;
        this.tail = undefined;
        this.size = 0;
    }
    *[Symbol.iterator]() {
        let current = this.head;
        while(current){
            yield current.value;
            current = current.next;
        }
    }
}
// source code of p-limit - https://github.com/sindresorhus/p-limit/ + modified to add types
const AsyncResource = {
    bind (fn, _type, thisArg) {
        return fn.bind(thisArg);
    }
};
function pLimit(concurrency) {
    if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {
        throw new TypeError("Expected `concurrency` to be a number from 1 and up");
    }
    const queue = new Queue();
    let activeCount = 0;
    const next = ()=>{
        activeCount--;
        if (queue.size > 0) {
            const fn = queue.dequeue();
            if (fn) {
                fn();
            }
        }
    };
    const run = async (function_, resolve, arguments_)=>{
        activeCount++;
        // @ts-ignore
        const result = (async ()=>function_(...arguments_))();
        resolve(result);
        try {
            await result;
        } catch  {}
        next();
    };
    const enqueue = (function_, resolve, arguments_)=>{
        queue.enqueue(AsyncResource.bind(run.bind(undefined, function_, resolve, arguments_)));
        (async ()=>{
            // This function needs to wait until the next microtask before comparing
            // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously
            // when the run function is dequeued and called. The comparison in the if-statement
            // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.
            await Promise.resolve();
            if (activeCount < concurrency && queue.size > 0) {
                const fn = queue.dequeue();
                if (fn) {
                    fn();
                }
            }
        })();
    };
    const generator = (function_, ...arguments_)=>new Promise((resolve)=>{
            enqueue(function_, resolve, arguments_);
        });
    Object.defineProperties(generator, {
        activeCount: {
            get: ()=>activeCount
        },
        pendingCount: {
            get: ()=>queue.size
        },
        clearQueue: {
            value () {
                queue.clear();
            }
        }
    });
    return generator;
} //# sourceMappingURL=p-limit.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/formatNumber.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Round up a number to a certain decimal place
 * @example
 * ```ts
 * import { formatNumber } from "thirdweb/utils";
 * const value = formatNumber(12.1214141, 1); // 12.1
 * ```
 * @utils
 */ __turbopack_context__.s({
    "formatNumber": (()=>formatNumber)
});
function formatNumber(value, decimalPlaces) {
    if (value === 0) return 0;
    const precision = 10 ** decimalPlaces;
    const threshold = 1 / 10 ** decimalPlaces; // anything below this if rounded will result in zero - so use ceil instead
    const fn = value < threshold ? "ceil" : "round";
    return Math[fn]((value + Number.EPSILON) * precision) / precision;
} //# sourceMappingURL=formatNumber.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/shortenLargeNumber.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Shorten the string for large value
 * Mainly used for
 * Examples:
 * 10_000 -> 10k
 * 1_000_000 -> 1M
 * 1_000_000_000 -> 1B
 * @example
 * ```ts
 * import { shortenLargeNumber } from "thirdweb/utils";
 * const numStr = shortenLargeNumber(1_000_000_000, )
 * ```
 * @utils
 */ __turbopack_context__.s({
    "shortenLargeNumber": (()=>shortenLargeNumber)
});
function shortenLargeNumber(value) {
    if (value === 0) {
        return "0.00";
    }
    if (value < 1000) {
        return value.toString();
    }
    if (value < 10_000) {
        return value.toLocaleString("en-US");
    }
    if (value < 1_000_000) {
        return formatLargeNumber(value, 1_000, "k");
    }
    if (value < 1_000_000_000) {
        return formatLargeNumber(value, 1_000_000, "M");
    }
    return formatLargeNumber(value, 1_000_000_000, "B");
}
/**
 * Shorten the string for large value (over 4 digits)
 * 1000 -> 1000
 * 10_000 -> 10k
 * 1_000_000 -> 1M
 * 1_000_000_000 -> 1B
 */ function formatLargeNumber(value, divisor, suffix) {
    const quotient = value / divisor;
    if (Number.isInteger(quotient)) {
        return Math.floor(quotient) + suffix;
    }
    return quotient.toFixed(1).replace(/\.0$/, "") + suffix;
} //# sourceMappingURL=shortenLargeNumber.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/function-id.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getFunctionId": (()=>getFunctionId)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/random.js [app-client] (ecmascript)");
;
const functionIdCache = new Map();
function getFunctionId(fn) {
    if (functionIdCache.has(fn)) {
        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set
        return functionIdCache.get(fn);
    }
    const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["randomBytesHex"])();
    functionIdCache.set(fn, id);
    return id;
} //# sourceMappingURL=function-id.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/text-decoder.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cachedTextDecoder": (()=>cachedTextDecoder)
});
let textDecoder;
function cachedTextDecoder() {
    if (!textDecoder) {
        textDecoder = new TextDecoder();
    }
    return textDecoder;
} //# sourceMappingURL=text-decoder.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/uint8-array.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "areUint8ArraysEqual": (()=>areUint8ArraysEqual),
    "base64ToString": (()=>base64ToString),
    "base64ToUint8Array": (()=>base64ToUint8Array),
    "base64UrlToBase64": (()=>base64UrlToBase64),
    "compareUint8Arrays": (()=>compareUint8Arrays),
    "concatUint8Arrays": (()=>concatUint8Arrays),
    "isUint8Array": (()=>isUint8Array),
    "uint8ArrayToBase64": (()=>uint8ArrayToBase64)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$text$2d$decoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/text-decoder.js [app-client] (ecmascript)");
;
const uint8ArrayStringified = "[object Uint8Array]";
/**
 * Throw a `TypeError` if the given value is not an instance of `Uint8Array`.
 * @example
 * ```ts
 * import {assertUint8Array} from 'uint8array-extras';
 *
 * try {
 * assertUint8Array(new ArrayBuffer(10)); // Throws a TypeError
 * } catch (error) {
 * console.error(error.message);
 * }
 * ```
 */ function assertUint8Array(value) {
    if (!isUint8Array(value)) {
        throw new TypeError(`Expected \`Uint8Array\`, got \`${typeof value}\``);
    }
}
function isUint8Array(value) {
    if (!value) {
        return false;
    }
    if (value.constructor === Uint8Array) {
        return true;
    }
    return Object.prototype.toString.call(value) === uint8ArrayStringified;
}
function areUint8ArraysEqual(a, b) {
    assertUint8Array(a);
    assertUint8Array(b);
    if (a === b) {
        return true;
    }
    if (a.length !== b.length) {
        return false;
    }
    for(let index = 0; index < a.length; index++){
        if (a[index] !== b[index]) {
            return false;
        }
    }
    return true;
}
/**
 * Convert a `Uint8Array` (containing a UTF-8 string) to a string.
 *
 * Replacement for [`Buffer#toString()`](https://nodejs.org/api/buffer.html#buftostringencoding-start-end).
 * @example
 * ```ts
 * import {uint8ArrayToString} from 'uint8array-extras';
 *
 * const byteArray = new Uint8Array([72, 101, 108, 108, 111]);
 *
 * console.log(uint8ArrayToString(byteArray));
 * //=> 'Hello'
 * ```
 */ function uint8ArrayToString(array) {
    assertUint8Array(array);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$text$2d$decoder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cachedTextDecoder"])().decode(array);
}
function assertString(value) {
    if (typeof value !== "string") {
        throw new TypeError(`Expected \`string\`, got \`${typeof value}\``);
    }
}
function base64UrlToBase64(base64url) {
    // Replace Base64URL characters with Base64 characters
    let base64 = base64url.replace(/-/g, "+").replace(/_/g, "/");
    // Add padding if necessary
    const padding = base64.length % 4;
    if (padding !== 0) {
        base64 += "=".repeat(4 - padding);
    }
    return base64;
}
function base64ToUint8Array(base64String) {
    assertString(base64String);
    return Uint8Array.from(globalThis.atob(base64UrlToBase64(base64String)), // biome-ignore lint/style/noNonNullAssertion: we know that the code points exist
    (x)=>x.codePointAt(0));
}
function base64ToString(base64String) {
    assertString(base64String);
    return uint8ArrayToString(base64ToUint8Array(base64String));
}
function base64ToBase64Url(base64) {
    return base64.replaceAll("+", "-").replaceAll("/", "_").replace(/=+$/, "");
}
// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/
const MAX_BLOCK_SIZE = 65_535;
function uint8ArrayToBase64(array, { urlSafe = false } = {}) {
    assertUint8Array(array);
    let base64;
    if (array.length < MAX_BLOCK_SIZE) {
        // Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem
        // @ts-expect-error - TS doesn't know about `String#fromCodePoint`
        base64 = globalThis.btoa(String.fromCodePoint.apply(this, array));
    } else {
        base64 = "";
        for (const value of array){
            base64 += String.fromCodePoint(value);
        }
        base64 = globalThis.btoa(base64);
    }
    return urlSafe ? base64ToBase64Url(base64) : base64;
}
function concatUint8Arrays(arrays, totalLength) {
    if (arrays.length === 0) {
        return new Uint8Array(0);
    }
    const calculatedTotalLength = totalLength ?? arrays.reduce((accumulator, currentValue)=>accumulator + currentValue.length, 0);
    const returnValue = new Uint8Array(calculatedTotalLength);
    let offset = 0;
    for (const array of arrays){
        assertUint8Array(array);
        returnValue.set(array, offset);
        offset += array.length;
    }
    return returnValue;
}
function compareUint8Arrays(a, b) {
    assertUint8Array(a);
    assertUint8Array(b);
    const length = Math.min(a.length, b.length);
    for(let index = 0; index < length; index++){
        // biome-ignore lint/style/noNonNullAssertion: we check the length above so the index is always in bounds
        const diff = a[index] - b[index];
        if (diff !== 0) {
            return Math.sign(diff);
        }
    }
    // At this point, all the compared elements are equal.
    // The shorter array should come first if the arrays are of different lengths.
    return Math.sign(a.length - b.length);
} //# sourceMappingURL=uint8-array.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/ens/isValidENSName.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// modified version of isFQDN from validator.js that checks if given string is a valid domain name
// https://github.com/validatorjs/validator.js/blob/master/src/lib/isFQDN.js
// underscores are allowed, hyphens are allowed, no max length check
/**
 * Checks if a string is a valid ENS name.
 * It does not check if the ENS name is currently registered or resolves to an address - it only validates the string format.
 *
 * @param name - The ENS name to check.
 *
 * @example
 * ```ts
 * isValidENSName("thirdweb.eth"); // true
 * isValidENSName("foo.bar.com"); // true
 * isValidENSName("xyz"); // false
 */ __turbopack_context__.s({
    "isValidENSName": (()=>isValidENSName)
});
function isValidENSName(name) {
    const parts = name.split(".");
    const tld = parts[parts.length - 1];
    // disallow fqdns without tld
    if (parts.length < 2 || !tld) {
        return false;
    }
    // disallow spaces
    if (/\s/.test(tld)) {
        return false;
    }
    // reject numeric TLDs
    if (/^\d+$/.test(tld)) {
        return false;
    }
    return parts.every((part)=>{
        // part must be at least 1 char long
        if (part.length < 1) {
            return false;
        }
        // disallow invalid chars
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
            return false;
        }
        // disallow full-width chars
        if (/[\uff01-\uff5e]/.test(part)) {
            return false;
        }
        return true;
    });
} //# sourceMappingURL=isValidENSName.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/base64/base64.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isBase64JSON": (()=>isBase64JSON),
    "parseBase64String": (()=>parseBase64String)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/uint8-array.js [app-client] (ecmascript)");
;
function isBase64JSON(input) {
    if (input.startsWith("data:application/json;base64")) {
        return true;
    }
    return false;
}
function parseBase64String(input) {
    const [, base64] = input.split(",");
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$uint8$2d$array$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base64ToString"])(base64);
} //# sourceMappingURL=base64.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/nft/fetchTokenMetadata.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fetchTokenMetadata": (()=>fetchTokenMetadata)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$base64$2f$base64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/base64/base64.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
;
async function fetchTokenMetadata(options) {
    const { client, tokenId, tokenUri } = options;
    // handle case where the URI is a base64 encoded JSON (onchain nft)
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$base64$2f$base64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBase64JSON"])(tokenUri)) {
        try {
            return JSON.parse((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$base64$2f$base64$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseBase64String"])(tokenUri));
        } catch (e) {
            console.error("Failed to fetch base64 encoded NFT", {
                tokenId,
                tokenUri
            }, e);
            throw e;
        }
    }
    // in all other cases we will need the `download` function from storage
    const { download } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/storage/download.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
    // handle non-dynamic uris (most common case -> skip the other checks)
    try {
        if (!tokenUri.includes("{id}")) {
            return await (await download({
                client,
                uri: tokenUri
            })).json();
        }
    } catch (e) {
        console.error("Failed to fetch non-dynamic NFT", {
            tokenId,
            tokenUri
        }, e);
        throw e;
    }
    // DYNAMIC NFT FORMATS (2 options, sadly has to be waterfall)
    try {
        try {
            // try first dynamic id format
            return await (await download({
                client,
                uri: tokenUri.replace("{id}", (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(tokenId, {
                    size: 32
                }).slice(2))
            })).json();
        } catch  {
            // otherwise attempt the second format
            return await (await download({
                client,
                uri: tokenUri.replace("{id}", tokenId.toString())
            })).json();
        }
    } catch (e) {
        console.error("Failed to fetch dynamic NFT", {
            tokenId,
            tokenUri
        }, e);
        throw e;
    }
} //# sourceMappingURL=fetchTokenMetadata.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/utils/arweave.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "resolveArweaveScheme": (()=>resolveArweaveScheme)
});
const DEFAULT_GATEWAY = "https://arweave.net/{fileId}";
function resolveArweaveScheme(options) {
    if (options.uri.startsWith("ar://")) {
        const fileId = options.uri.replace("ar://", "");
        if (options.gatewayUrl) {
            const separator = options.gatewayUrl.endsWith("/") ? "" : "/";
            return `${options.gatewayUrl}${separator}${fileId}`;
        }
        return DEFAULT_GATEWAY.replace("{fileId}", fileId);
    }
    if (options.uri.startsWith("http")) {
        return options.uri;
    }
    throw new Error(`Invalid URI scheme, expected "ar://" or "http(s)://"`);
} //# sourceMappingURL=arweave.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/client/client.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createThirdwebClient": (()=>createThirdwebClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$client$2d$id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/client-id.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$jwt$2f$is$2d$jwt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/jwt/is-jwt.js [app-client] (ecmascript)");
;
;
function createThirdwebClient(options) {
    const { clientId, secretKey, ...rest } = options;
    let realClientId = clientId;
    if (secretKey) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$jwt$2f$is$2d$jwt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isJWT"])(secretKey)) {
            // when passing a JWT as secret key we HAVE to also have a clientId
            if (!clientId) {
                throw new Error("clientId must be provided when using a JWT secretKey");
            }
        } else {
            // always PREFER the clientId if provided, only compute it from the secretKey if we don't have a clientId passed explicitly
            realClientId = clientId ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$client$2d$id$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeClientIdFromSecretKey"])(secretKey);
        }
    }
    // only path we get here is if we have no secretKey and no clientId
    if (!realClientId) {
        throw new Error("clientId or secretKey must be provided");
    }
    return {
        ...rest,
        clientId: realClientId,
        secretKey
    };
} //# sourceMappingURL=client.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/avalanche.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "avalanche": (()=>avalanche)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const avalanche = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 43114,
    name: "Avalanche",
    nativeCurrency: {
        decimals: 18,
        name: "Avalanche",
        symbol: "AVAX"
    },
    blockExplorers: [
        {
            name: "SnowTrace",
            url: "https://snowtrace.io",
            apiUrl: "https://api.snowtrace.io/api"
        }
    ]
}); //# sourceMappingURL=avalanche.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/base.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "base": (()=>base)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const base = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 8453,
    name: "Base",
    nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Basescan",
            url: "https://basescan.org",
            apiUrl: "https://api.basescan.org/api"
        }
    ]
}); //# sourceMappingURL=base.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/base-sepolia.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "baseSepolia": (()=>baseSepolia)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const baseSepolia = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 84532,
    name: "Base Sepolia",
    nativeCurrency: {
        name: "Sepolia Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Basescan",
            url: "https://sepolia.basescan.org",
            apiUrl: "https://api-sepolia.basescan.org/api"
        }
    ],
    testnet: true
}); //# sourceMappingURL=base-sepolia.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/ethereum.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ethereum": (()=>ethereum),
    "mainnet": (()=>mainnet)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const ethereum = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 1,
    name: "Ethereum",
    nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Etherscan",
            url: "https://etherscan.io"
        }
    ]
});
const mainnet = ethereum; //# sourceMappingURL=ethereum.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/mode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "mode": (()=>mode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const mode = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 919,
    name: "Mode",
    nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Modescout",
            url: "https://explorer.mode.network/"
        }
    ]
}); //# sourceMappingURL=mode.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/optimism.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "optimism": (()=>optimism)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const optimism = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 10,
    name: "OP Mainnet",
    nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Optimism Explorer",
            url: "https://optimistic.etherscan.io",
            apiUrl: "https://api-optimistic.etherscan.io"
        }
    ]
}); //# sourceMappingURL=optimism.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/zora.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "zora": (()=>zora)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const zora = /*@__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 7777777,
    name: "Zora",
    nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
    },
    blockExplorers: [
        {
            name: "Explorer",
            url: "https://explorer.zora.energy",
            apiUrl: "https://explorer.zora.energy/api"
        }
    ]
}); //# sourceMappingURL=zora.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/optimism-sepolia.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "optimismSepolia": (()=>optimismSepolia)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const optimismSepolia = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 11155420,
    name: "OP Sepolia",
    nativeCurrency: {
        name: "Sepolia Ether",
        symbol: "ETH",
        decimals: 18
    },
    blockExplorers: [
        {
            name: "Blockscout",
            url: "https://optimism-sepolia.blockscout.com",
            apiUrl: "https://optimism-sepolia.blockscout.com/api"
        }
    ],
    testnet: true
}); //# sourceMappingURL=optimism-sepolia.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/zora-sepolia.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "zoraSepolia": (()=>zoraSepolia)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
;
const zoraSepolia = /*@__PURE__*/ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defineChain"])({
    id: 999999999,
    name: "Zora Sepolia",
    nativeCurrency: {
        decimals: 18,
        name: "Zora Sepolia",
        symbol: "ETH"
    },
    blockExplorers: [
        {
            name: "Zora Sepolia Explorer",
            url: "https://sepolia.explorer.zora.energy/",
            apiUrl: "https://sepolia.explorer.zora.energy/api"
        }
    ],
    testnet: true
}); //# sourceMappingURL=zora-sepolia.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/chains/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isOpStackChain": (()=>isOpStackChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$base$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/base-sepolia.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/base.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$optimism$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/optimism-sepolia.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$optimism$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/optimism.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$zora$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/zora-sepolia.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$zora$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/chain-definitions/zora.js [app-client] (ecmascript)");
;
;
;
;
;
;
const opChains = [
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$base$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["base"].id,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$base$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["baseSepolia"].id,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$optimism$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optimism"].id,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$optimism$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["optimismSepolia"].id,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$zora$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zora"].id,
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$chain$2d$definitions$2f$zora$2d$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zoraSepolia"].id,
    34443,
    919,
    42220,
    44787,
    204,
    5611
];
async function isOpStackChain(chain) {
    if (chain.id === 1337 || chain.id === 31337) {
        return false;
    }
    if (opChains.includes(chain.id)) {
        return true;
    }
    // fallback to checking the stack on rpc
    try {
        const { getChainMetadata } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const chainMetadata = await getChainMetadata(chain);
        return chainMetadata.stackType === "optimism_bedrock";
    } catch  {
        // If the network check fails, assume it's not a OP chain
        return false;
    }
} //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/analytics/track/transaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "trackTransaction": (()=>trackTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$analytics$2f$track$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/analytics/track/index.js [app-client] (ecmascript)");
;
;
async function trackTransaction(args) {
    return trackTransactionEvent({
        ...args,
        action: "transaction:sent"
    });
}
/**
 * @internal
 */ function trackTransactionEvent(args) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$analytics$2f$track$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["track"])({
        client: args.client,
        ecosystem: args.ecosystem,
        data: {
            action: args.action,
            clientId: args.client.clientId,
            chainId: args.chainId,
            transactionHash: args.transactionHash,
            walletAddress: args.walletAddress,
            walletType: args.walletType,
            contractAddress: args.contractAddress,
            functionName: args.functionName,
            gasPrice: args.gasPrice,
            errorCode: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$json$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(args.error)
        }
    });
} //# sourceMappingURL=transaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/analytics/track/pay.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "trackPayEvent": (()=>trackPayEvent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$analytics$2f$track$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/analytics/track/index.js [app-client] (ecmascript)");
;
async function trackPayEvent(args) {
    const data = {
        source: "pay",
        action: args.event,
        clientId: args.client.clientId,
        chainId: args.chainId,
        walletAddress: args.walletAddress,
        walletType: args.walletType,
        tokenAddress: args.fromToken,
        amountWei: args.amountWei,
        dstTokenAddress: args.toToken,
        dstChainId: args.toChainId,
        errorCode: args.error
    };
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$analytics$2f$track$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["track"])({
        client: args.client,
        ecosystem: args.ecosystem,
        data
    });
} //# sourceMappingURL=pay.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/prepare-transaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TransactionTypeMap": (()=>TransactionTypeMap),
    "prepareTransaction": (()=>prepareTransaction)
});
const TransactionTypeMap = {
    legacy: 0,
    eip1559: 1,
    eip2930: 2,
    eip4844: 3,
    eip7702: 4
};
function prepareTransaction(options, info) {
    if (info) {
        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
        options.__preparedMethod = info.preparedMethod;
        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
        options.__contract = info.contract;
    }
    return options;
} //# sourceMappingURL=prepare-transaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/extract-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "extractError": (()=>extractError),
    "extractErrorResult": (()=>extractErrorResult)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeErrorResult$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/decodeErrorResult.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$stringify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/stringify.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$actions$2f$resolve$2d$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/contract/actions/resolve-abi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/process.js [app-client] (ecmascript)");
;
;
;
;
async function extractError(args) {
    const { error, contract } = args;
    const result = await extractErrorResult({
        error,
        contract
    });
    if (result) {
        return new TransactionError(result, contract);
    }
    return error;
}
async function extractErrorResult(args) {
    const { error, contract } = args;
    if (typeof error === "object") {
        // try to parse RPC error
        const errorObj = error;
        if (errorObj.data) {
            if (errorObj.data !== "0x" && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$is$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isHex"])(errorObj.data)) {
                let abi = contract?.abi;
                if (contract && !abi) {
                    abi = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$actions$2f$resolve$2d$abi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolveContractAbi"])(contract).catch(()=>undefined);
                }
                const parsedError = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeErrorResult$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeErrorResult"])({
                    data: errorObj.data,
                    abi
                });
                return `${parsedError.errorName}${parsedError.args ? ` - ${parsedError.args}` : ""}`;
            }
        }
    }
    return `Execution Reverted: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$stringify$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stringify"])(error)}`;
}
class TransactionError extends Error {
    constructor(reason, contract){
        let message = reason;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IS_DEV"] && contract) {
            // show more infor in dev
            message = [
                reason,
                "",
                `contract: ${contract.address}`,
                `chainId: ${contract.chain?.id}`
            ].join("\n");
        }
        super(message);
        Object.defineProperty(this, "contractAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "chainId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = "TransactionError";
        this.contractAddress = contract?.address;
        this.chainId = contract?.chain?.id;
        this.message = message;
    }
} //# sourceMappingURL=extract-error.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/estimate-gas.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "estimateGas": (()=>estimateGas)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ox/_esm/core/Hex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$formatters$2f$transactionRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/formatters/transactionRequest.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/op-gas-fee-reducer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/to-bytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$extract$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/extract-error.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const cache = new WeakMap();
async function estimateGas(options) {
    // from is:
    // 1. the user specified from address
    // 2. the passed in account address
    // 3. the passed in wallet's account address
    const fromAddress = typeof options.from === "string" ? options.from ?? undefined : options.from?.address ?? options.account?.address;
    const txWithFrom = {
        ...options.transaction,
        from: fromAddress
    };
    if (cache.has(txWithFrom)) {
        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set
        return cache.get(txWithFrom);
    }
    const { account } = options;
    const promise = (async ()=>{
        const predefinedGas = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.gas);
        // if we have a predefined gas value in the TX -> always use that
        if (predefinedGas !== undefined) {
            return predefinedGas;
        }
        // if the wallet itself overrides the estimateGas function, use that
        if (account?.estimateGas) {
            try {
                let gas = await account.estimateGas(options.transaction);
                if (options.transaction.chain.experimental?.increaseZeroByteCount) {
                    gas = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundUpGas"])(gas);
                }
                return gas;
            } catch (error) {
                throw await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$extract$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extractError"])({
                    error,
                    contract: options.transaction.__contract
                });
            }
        }
        // load up encode function if we need it
        const { encode } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/actions/encode.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const [encodedData, toAddress, value, authorizationList] = await Promise.all([
            encode(options.transaction),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.to),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.value),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.authorizationList)
        ]);
        // load up the rpc client and the estimateGas function if we need it
        const [{ getRpcClient }, { eth_estimateGas }] = await Promise.all([
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_estimateGas.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
        ]);
        const rpcRequest = getRpcClient(options.transaction);
        try {
            let gas = await eth_estimateGas(rpcRequest, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$formatters$2f$transactionRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["formatTransactionRequest"])({
                to: toAddress ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(toAddress) : undefined,
                data: encodedData,
                from: fromAddress ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(fromAddress) : undefined,
                value,
                authorizationList: authorizationList?.map((auth)=>({
                        ...auth,
                        r: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNumber"])(auth.r),
                        s: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ox$2f$_esm$2f$core$2f$Hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fromNumber"])(auth.s),
                        nonce: Number(auth.nonce),
                        contractAddress: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(auth.address)
                    })),
                ...authorizationList && authorizationList?.length > 0 ? {
                    gas: minGas((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$to$2d$bytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexToBytes"])(encodedData), BigInt(authorizationList?.length ?? 0)) + 100000n
                } : {}
            }));
            if (options.transaction.chain.experimental?.increaseZeroByteCount) {
                gas = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundUpGas"])(gas);
            }
            return gas;
        } catch (error) {
            throw await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$extract$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extractError"])({
                error,
                contract: options.transaction.__contract
            });
        }
    })();
    cache.set(txWithFrom, promise);
    return promise;
}
// EIP-7623 + EIP-7702 floor calculation
const TxGas = 21000n;
const TxCostFloorPerToken = 10n; // params.TxCostFloorPerToken
const TxTokenPerNonZero = 4n; // params.TxTokenPerNonZeroByte
const TxAuthTupleGas = 12500n;
function minGas(data, authCount = 0n) {
    let nz = 0n;
    for (const b of data)if (b !== 0) nz++;
    const z = BigInt(data.length) - nz;
    const tokens = nz * TxTokenPerNonZero + z;
    const floor = TxGas + tokens * TxCostFloorPerToken;
    const intrinsic = TxGas + authCount * TxAuthTupleGas;
    return floor > intrinsic ? floor : intrinsic;
} //# sourceMappingURL=estimate-gas.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/estimate-gas-cost.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "estimateGasCost": (()=>estimateGasCost)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$fee$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/fee-data.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/units.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/estimate-gas.js [app-client] (ecmascript)");
;
;
;
;
;
async function estimateGasCost(options) {
    const { transaction } = options;
    const from = options.from ?? options.account?.address ?? undefined;
    const gasLimit = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.gas) || await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["estimateGas"])({
        transaction,
        from
    });
    const fees = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$fee$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getDefaultGasOverrides"])(transaction.client, transaction.chain);
    const gasPrice = fees.maxFeePerGas || fees.gasPrice;
    if (gasPrice === undefined) {
        throw new Error(`Unable to determine gas price for chain ${transaction.chain.id}`);
    }
    let l1Fee;
    if (await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOpStackChain"])(transaction.chain)) {
        const { estimateL1Fee } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/gas/estimate-l1-fee.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        l1Fee = await estimateL1Fee({
            transaction
        });
    } else {
        l1Fee = 0n;
    }
    const wei = gasLimit * gasPrice + l1Fee;
    return {
        ether: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toEther"])(wei),
        wei
    };
} //# sourceMappingURL=estimate-gas-cost.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getTransactionGasCost": (()=>getTransactionGasCost),
    "isAbiFunction": (()=>isAbiFunction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$get$2d$gas$2d$price$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/get-gas-price.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2d$cost$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/estimate-gas-cost.js [app-client] (ecmascript)");
;
;
function isAbiFunction(item) {
    return !!(item && typeof item === "object" && "type" in item && item.type === "function");
}
async function getTransactionGasCost(tx, from) {
    try {
        const gasCost = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2d$cost$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["estimateGasCost"])({
            transaction: tx,
            from
        });
        const bufferCost = gasCost.wei / 10n;
        // Note: get tx.value AFTER estimateGasCost
        // add 10% extra gas cost to the estimate to ensure user buys enough to cover the tx cost
        return gasCost.wei + bufferCost;
    } catch  {
        if (from) {
            // try again without passing from
            return await getTransactionGasCost(tx);
        }
        // fallback if both fail, use the tx value + 1M * gas price
        const gasPrice = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$get$2d$gas$2d$price$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGasPrice"])({
            client: tx.client,
            chain: tx.chain
        });
        return 1000000n * gasPrice;
    }
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/prepare-contract-call.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "prepareContractCall": (()=>prepareContractCall)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/abi/prepare-method.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$prepare$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/prepare-transaction.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/utils.js [app-client] (ecmascript)");
;
;
;
;
;
;
function prepareContractCall(options) {
    const { contract, method, params, ...rest } = options;
    const preparedMethodPromise = ()=>(async ()=>{
            if (Array.isArray(method)) {
                return method;
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAbiFunction"])(method)) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(method);
            }
            if (typeof method === "function") {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(await method(contract));
            }
            // if the method starts with the string `function ` we always will want to try to parse it
            if (typeof method === "string" && method.startsWith("function ")) {
                // @ts-expect-error - method *is* string in this case
                const abiItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseAbiItem"])(method);
                if (abiItem.type === "function") {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(abiItem);
                }
                throw new Error(`"method" passed is not of type "function"`);
            }
            // check if we have a "abi" on the contract
            if (contract.abi && contract.abi?.length > 0) {
                // extract the abiFunction from it
                const abiFunction = contract.abi?.find((item)=>item.type === "function" && item.name === method);
                // if we were able to find it -> return it
                if (abiFunction) {
                    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(abiFunction);
                }
            }
            throw new Error(`Could not resolve method "${method}".`);
        })();
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$prepare$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareTransaction"])({
        ...rest,
        // these always inferred from the contract
        to: contract.address,
        chain: contract.chain,
        client: contract.client,
        data: async ()=>{
            let preparedM;
            if (Array.isArray(method)) {
                preparedM = method;
            } else {
                preparedM = await preparedMethodPromise();
            }
            if (preparedM[1].length === 0) {
                // just return the fn sig directly -> no params
                return preparedM[0];
            }
            // we do a "manual" concat here to avoid the overhead of the "concatHex" function
            // we can do this because we know the specific formats of the values
            return preparedM[0] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodeAbiParameters"])(preparedM[1], // @ts-expect-error - TODO: fix this type issue
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(params ?? [])).slice(2);
        }
    }, {
        preparedMethod: preparedMethodPromise,
        contract: contract
    });
} //# sourceMappingURL=prepare-contract-call.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/encode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "encode": (()=>encode),
    "getDataFromTx": (()=>getDataFromTx),
    "getExtraCallDataFromTx": (()=>getExtraCallDataFromTx)
});
const encodeWeakMap = new WeakMap();
async function encode(transaction) {
    if (encodeWeakMap.has(transaction)) {
        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set
        return encodeWeakMap.get(transaction);
    }
    const promise = (async ()=>{
        const [data, extraData, { concatHex }] = await Promise.all([
            getDataFromTx(transaction),
            getExtraCallDataFromTx(transaction),
            __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/concat-hex.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
        ]);
        if (extraData) {
            return concatHex([
                data,
                extraData
            ]);
        }
        return data;
    })();
    encodeWeakMap.set(transaction, promise);
    return promise;
}
async function getDataFromTx(transaction) {
    if (transaction.data === undefined) {
        return "0x";
    }
    if (typeof transaction.data === "function") {
        const data = await transaction.data();
        if (!data) {
            return "0x";
        }
        return data;
    }
    return transaction.data;
}
async function getExtraCallDataFromTx(transaction) {
    if (!transaction.extraCallData) {
        return undefined;
    }
    if (typeof transaction.extraCallData === "function") {
        const extraData = await transaction.extraCallData();
        if (!extraData) return undefined;
        if (!extraData.startsWith("0x")) {
            throw Error("Invalid extra calldata - must be a hex string");
        }
        if (extraData === "0x") {
            return undefined;
        }
        return extraData;
    }
    if (!transaction.extraCallData.startsWith("0x")) {
        throw Error("Invalid extra calldata - must be a hex string");
    }
    return transaction.extraCallData;
} //# sourceMappingURL=encode.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/to-serializable-transaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "toSerializableTransaction": (()=>toSerializableTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$fee$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/fee-data.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$any$2d$evm$2f$zksync$2f$isZkSyncChain$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/any-evm/zksync/isZkSyncChain.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$encode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/encode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/estimate-gas.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
async function toSerializableTransaction(options) {
    // zk chains require a different rpc method for gas estimation and gas fees
    const isZkSync = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$any$2d$evm$2f$zksync$2f$isZkSyncChain$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isZkSyncChain"])(options.transaction.chain);
    if (isZkSync) {
        const { getZkGasFees } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/actions/zksync/send-eip712-transaction.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const { gas, maxFeePerGas, maxPriorityFeePerGas } = await getZkGasFees({
            transaction: options.transaction,
            from: typeof options.from === "string" // Is this just an address?
             ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(options.from) : options.from !== undefined // Is this an account?
             ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(options.from.address) : undefined
        });
        // passing these values here will avoid re-fetching them below
        options.transaction = {
            ...options.transaction,
            gas,
            maxFeePerGas,
            maxPriorityFeePerGas
        };
    }
    const rpcRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])(options.transaction);
    const chainId = options.transaction.chain.id;
    const from = options.from;
    let [data, nonce, gas, feeData, to, accessList, value, authorizationList, type] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$encode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encode"])(options.transaction),
        (async ()=>{
            // if the user has specified a nonce, use that
            const resolvedNonce = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.nonce);
            if (resolvedNonce !== undefined) {
                return resolvedNonce;
            }
            return from // otherwise get the next nonce (import the method to do so)
             ? await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_getTransactionCount.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i).then(({ eth_getTransactionCount })=>eth_getTransactionCount(rpcRequest, {
                    address: typeof from === "string" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(from) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(from.address),
                    blockTag: "pending"
                })) : undefined;
        })(),
        // takes the same options as the sendTransaction function thankfully!
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$estimate$2d$gas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["estimateGas"])({
            ...options,
            from: options.from
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$fee$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGasOverridesForTransaction"])(options.transaction),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.to),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.accessList),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.value),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.authorizationList),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.type)
    ]);
    const extraGas = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(options.transaction.extraGas);
    if (extraGas) {
        gas += extraGas;
    }
    return {
        to,
        chainId,
        data,
        gas,
        nonce,
        accessList,
        value,
        authorizationList,
        type,
        ...feeData
    };
} //# sourceMappingURL=to-serializable-transaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/read-contract.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "readContract": (()=>readContract)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/decodeAbiParameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_call$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_call.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/abi/prepare-method.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
async function readContract(options) {
    const { contract, method, params } = options;
    const resolvePreparedMethod = async ()=>{
        if (Array.isArray(method)) {
            return method;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAbiFunction"])(method)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(method);
        }
        if (typeof method === "function") {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(await method(contract));
        }
        // if the method starts with the string `function ` we always will want to try to parse it
        if (typeof method === "string" && method.startsWith("function ")) {
            // @ts-expect-error - method *is* string in this case
            const abiItem = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseAbiItem"])(method);
            if (abiItem.type === "function") {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(abiItem);
            }
            throw new Error(`"method" passed is not of type "function"`);
        }
        // check if we have a "abi" on the contract
        if (contract.abi && contract.abi?.length > 0) {
            // extract the abiFunction from it
            const abiFunction = contract.abi?.find((item)=>item.type === "function" && item.name === method);
            // if we were able to find it -> return it
            if (abiFunction) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$prepare$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["prepareMethod"])(abiFunction);
            }
        }
        throw new Error(`Could not resolve method "${method}".`);
    };
    // resolve in parallel
    const [resolvedPreparedMethod, resolvedParams] = await Promise.all([
        resolvePreparedMethod(),
        typeof params === "function" ? params() : params
    ]);
    let encodedData;
    // if we have no inputs, we know it's just the signature
    if (resolvedPreparedMethod[1].length === 0) {
        encodedData = resolvedPreparedMethod[0];
    } else {
        // we do a "manual" concat here to avoid the overhead of the "concatHex" function
        // we can do this because we know the specific formats of the values
        encodedData = resolvedPreparedMethod[0] + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodeAbiParameters"])(resolvedPreparedMethod[1], // @ts-expect-error - TODO: fix this type issue
        resolvedParams).slice(2);
    }
    const rpcRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])({
        chain: contract.chain,
        client: contract.client
    });
    const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_call$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eth_call"])(rpcRequest, {
        data: encodedData,
        to: contract.address,
        from: options.from ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(options.from) : undefined
    });
    // use the prepared method to decode the result
    const decoded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeAbiParameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeAbiParameters"])(resolvedPreparedMethod[2], result);
    if (Array.isArray(decoded) && decoded.length === 1) {
        return decoded[0];
    }
    return decoded;
} //# sourceMappingURL=read-contract.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/transaction-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addTransactionToStore": (()=>addTransactionToStore),
    "getPastTransactions": (()=>getPastTransactions),
    "getTransactionStore": (()=>getTransactionStore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$insight$2f$get$2d$transactions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/insight/get-transactions.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$reactive$2f$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/reactive/store.js [app-client] (ecmascript)");
;
;
const transactionsByAddress = new Map();
function getTransactionStore(address) {
    const existingStore = transactionsByAddress.get(address);
    if (existingStore) {
        return existingStore;
    }
    const newStore = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$reactive$2f$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStore"])([]);
    transactionsByAddress.set(address, newStore);
    return newStore;
}
function addTransactionToStore(options) {
    const { address, transactionHash, chainId } = options;
    const tranasctionStore = getTransactionStore(address);
    tranasctionStore.setValue([
        ...tranasctionStore.getValue(),
        {
            transactionHash,
            chainId
        }
    ]);
    transactionsByAddress.set(address, tranasctionStore);
}
async function getPastTransactions(options) {
    const { walletAddress, chain, client } = options;
    const oneMonthsAgoInSeconds = Math.floor((Date.now() - 1 * 30 * 24 * 60 * 60 * 1000) / 1000);
    const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$insight$2f$get$2d$transactions$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTransactions"])({
        client,
        walletAddress,
        chains: [
            chain
        ],
        queryOptions: {
            filter_block_timestamp_gte: oneMonthsAgoInSeconds,
            limit: 20
        }
    });
    return result.map((tx)=>({
            transactionHash: tx.hash,
            chainId: tx.chain_id,
            receipt: {
                status: tx.status === 1 ? "success" : "failed",
                to: tx.to_address
            }
        }));
} //# sourceMappingURL=transaction-store.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/send-transaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sendTransaction": (()=>sendTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/config.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$transaction$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/transaction-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$to$2d$serializable$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/to-serializable-transaction.js [app-client] (ecmascript)");
;
;
;
async function sendTransaction(options) {
    let { account, transaction, gasless } = options;
    const decorator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTransactionDecorator"])();
    if (decorator) {
        const { account: decoratedAccount, transaction: decoratedTransaction } = await decorator({
            account,
            transaction
        });
        account = decoratedAccount;
        transaction = decoratedTransaction;
    }
    if (account.onTransactionRequested) {
        await account.onTransactionRequested(transaction);
    }
    // if zksync transaction params are set, send with eip712
    if (transaction.eip712) {
        const { sendEip712Transaction } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/actions/zksync/send-eip712-transaction.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        return sendEip712Transaction({
            account,
            transaction
        });
    }
    const serializableTransaction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$to$2d$serializable$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toSerializableTransaction"])({
        transaction: transaction,
        from: account
    });
    // branch for gasless transactions
    if (gasless) {
        // lazy load the gasless tx function because it's only needed for gasless transactions
        const { sendGaslessTransaction } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/actions/gasless/send-gasless-transaction.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        return sendGaslessTransaction({
            account,
            transaction,
            serializableTransaction,
            gasless
        });
    }
    const result = await account.sendTransaction(serializableTransaction);
    // Store the transaction
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$transaction$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addTransactionToStore"])({
        address: account.address,
        transactionHash: result.transactionHash,
        chainId: transaction.chain.id
    });
    return {
        ...result,
        chain: transaction.chain,
        client: transaction.client
    };
} //# sourceMappingURL=send-transaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/zksync/getEip721Domain.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "gasPerPubdataDefault": (()=>gasPerPubdataDefault),
    "getEip712Domain": (()=>getEip712Domain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$zksync$2f$utils$2f$hashBytecode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/zksync/utils/hashBytecode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
;
const gasPerPubdataDefault = 50000n;
const getEip712Domain = (transaction)=>{
    const message = transactionToMessage(transaction);
    return {
        domain: {
            name: "zkSync",
            version: "2",
            chainId: transaction.chainId
        },
        types: {
            Transaction: [
                {
                    name: "txType",
                    type: "uint256"
                },
                {
                    name: "from",
                    type: "uint256"
                },
                {
                    name: "to",
                    type: "uint256"
                },
                {
                    name: "gasLimit",
                    type: "uint256"
                },
                {
                    name: "gasPerPubdataByteLimit",
                    type: "uint256"
                },
                {
                    name: "maxFeePerGas",
                    type: "uint256"
                },
                {
                    name: "maxPriorityFeePerGas",
                    type: "uint256"
                },
                {
                    name: "paymaster",
                    type: "uint256"
                },
                {
                    name: "nonce",
                    type: "uint256"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "factoryDeps",
                    type: "bytes32[]"
                },
                {
                    name: "paymasterInput",
                    type: "bytes"
                }
            ]
        },
        primaryType: "Transaction",
        message: message
    };
};
function transactionToMessage(transaction) {
    const { gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, paymaster, paymasterInput, gasPerPubdata, data, factoryDeps } = transaction;
    return {
        txType: 113n,
        from: BigInt(from),
        to: to ? BigInt(to) : 0n,
        gasLimit: gas ?? 0n,
        gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,
        maxFeePerGas: maxFeePerGas ?? 0n,
        maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,
        paymaster: paymaster ? BigInt(paymaster) : 0n,
        nonce: nonce ? BigInt(nonce) : 0n,
        value: value ?? 0n,
        data: data ? data : "0x0",
        factoryDeps: factoryDeps?.map((dep)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$zksync$2f$utils$2f$hashBytecode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hashBytecode"])(dep))) ?? [],
        paymasterInput: paymasterInput ? paymasterInput : "0x"
    };
} //# sourceMappingURL=getEip721Domain.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/transaction/actions/zksync/send-eip712-transaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getZkGasFees": (()=>getZkGasFees),
    "populateEip712Transaction": (()=>populateEip712Transaction),
    "sendEip712Transaction": (()=>sendEip712Transaction),
    "signEip712Transaction": (()=>signEip712Transaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toBytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/encoding/toBytes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toRlp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/encoding/toRlp.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_sendRawTransaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/bigint.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$concat$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/helpers/concat-hex.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$encode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/encode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$to$2d$serializable$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/to-serializable-transaction.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$zksync$2f$getEip721Domain$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/transaction/actions/zksync/getEip721Domain.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
async function sendEip712Transaction(options) {
    const { account, transaction } = options;
    const eip712Transaction = await populateEip712Transaction(options);
    const hash = await signEip712Transaction({
        account,
        eip712Transaction,
        chainId: transaction.chain.id
    });
    const rpc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])(transaction);
    const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_sendRawTransaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eth_sendRawTransaction"])(rpc, hash);
    return {
        transactionHash: result,
        chain: transaction.chain,
        client: transaction.client
    };
}
async function signEip712Transaction(options) {
    const { account, eip712Transaction, chainId } = options;
    // EIP712 signing of the serialized tx
    const eip712Domain = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$zksync$2f$getEip721Domain$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEip712Domain"])(eip712Transaction);
    const customSignature = await account.signTypedData({
        // biome-ignore lint/suspicious/noExplicitAny: TODO type properly
        ...eip712Domain
    });
    return serializeTransactionEIP712({
        ...eip712Transaction,
        chainId,
        customSignature
    });
}
async function populateEip712Transaction(options) {
    const { account, transaction } = options;
    const { gas, maxFeePerGas, maxPriorityFeePerGas, gasPerPubdata } = await getZkGasFees({
        transaction,
        from: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(account.address)
    });
    // serialize the transaction (with fees, gas, nonce)
    const serializableTransaction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$to$2d$serializable$2d$transaction$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toSerializableTransaction"])({
        transaction: {
            ...transaction,
            gas,
            maxFeePerGas,
            maxPriorityFeePerGas
        },
        from: account.address
    });
    return {
        ...serializableTransaction,
        ...transaction.eip712,
        gasPerPubdata,
        from: account.address
    };
}
function serializeTransactionEIP712(transaction) {
    const { chainId, gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, customSignature, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
    const serializedTransaction = [
        nonce ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(nonce) : "0x",
        maxPriorityFeePerGas ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(maxFeePerGas) : "0x",
        gas ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(gas) : "0x",
        to ?? "0x",
        value ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(value) : "0x",
        data ?? "0x0",
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(chainId),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(""),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(""),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(chainId),
        from ?? "0x",
        gasPerPubdata ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(gasPerPubdata) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$zksync$2f$getEip721Domain$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["gasPerPubdataDefault"]),
        factoryDeps ?? [],
        customSignature ?? "0x",
        paymaster && paymasterInput ? [
            paymaster,
            paymasterInput
        ] : []
    ];
    // @ts-ignore - TODO: fix types
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$helpers$2f$concat$2d$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concatHex"])([
        "0x71",
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toRlp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toRlp"])(serializedTransaction)
    ]);
}
async function getZkGasFees(args) {
    const { transaction, from } = args;
    let [gas, maxFeePerGas, maxPriorityFeePerGas, eip712] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.gas),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.maxFeePerGas),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.maxPriorityFeePerGas),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.eip712)
    ]);
    let gasPerPubdata = eip712?.gasPerPubdata;
    if (gas === undefined || maxFeePerGas === undefined || maxPriorityFeePerGas === undefined) {
        const rpc = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])(transaction);
        const params = await formatTransaction({
            transaction,
            from
        });
        const result = await rpc({
            // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types
            method: "zks_estimateFee",
            // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types
            params: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replaceBigInts"])(params, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toHex"])
            ]
        });
        gas = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBigInt"])(result.gas_limit) * 2n; // overestimating to avoid issues when not accounting for paymaster extra gas ( we should really pass the paymaster input above for better accuracy )
        const baseFee = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBigInt"])(result.max_fee_per_gas);
        maxFeePerGas = baseFee * 2n; // bumping the base fee per gas to ensure fast inclusion
        maxPriorityFeePerGas = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBigInt"])(result.max_priority_fee_per_gas) || 1n;
        gasPerPubdata = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$bigint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toBigInt"])(result.gas_per_pubdata_limit) * 2n; // doubling for fast inclusion;
        if (gasPerPubdata < 50000n) {
            // enforce a minimum gas per pubdata limit
            gasPerPubdata = 50000n;
        }
    }
    return {
        gas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        gasPerPubdata
    };
}
async function formatTransaction(args) {
    const { transaction, from } = args;
    const [data, to, value, eip712] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$transaction$2f$actions$2f$encode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encode"])(transaction),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.to),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.value),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.eip712)
    ]);
    const gasPerPubdata = eip712?.gasPerPubdata;
    return {
        from,
        to,
        data,
        value,
        gasPerPubdata,
        eip712Meta: {
            ...eip712,
            gasPerPubdata: gasPerPubdata || 50000n,
            factoryDeps: eip712?.factoryDeps?.map((dep)=>Array.from((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$encoding$2f$toBytes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["hexToBytes"])(dep)))
        },
        type: "0x71"
    };
} //# sourceMappingURL=send-eip712-transaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_gasPrice.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eth_gasPrice": (()=>eth_gasPrice)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
async function eth_gasPrice(request) {
    const result = await request({
        method: "eth_gasPrice"
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(result);
} //# sourceMappingURL=eth_gasPrice.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_getBlockByNumber.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eth_getBlockByNumber": (()=>eth_getBlockByNumber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$formatters$2f$block$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/formatters/block.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
;
async function eth_getBlockByNumber(request, params) {
    const blockTag = params.blockTag ?? "latest";
    const includeTransactions = params.includeTransactions ?? false;
    const blockNumberHex = params.blockNumber !== undefined ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(params.blockNumber) : undefined;
    const block = await request({
        method: "eth_getBlockByNumber",
        params: [
            blockNumberHex || blockTag,
            includeTransactions
        ]
    });
    if (!block) {
        throw new Error("Block not found");
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$formatters$2f$block$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["formatBlock"])(block);
} //# sourceMappingURL=eth_getBlockByNumber.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_maxPriorityFeePerGas.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eth_maxPriorityFeePerGas": (()=>eth_maxPriorityFeePerGas)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
async function eth_maxPriorityFeePerGas(request) {
    const result = await request({
        method: "eth_maxPriorityFeePerGas"
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(result);
} //# sourceMappingURL=eth_maxPriorityFeePerGas.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_call.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eth_call": (()=>eth_call)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
function encodeStateOverrides(overrides) {
    return Object.fromEntries(Object.entries(overrides).map(([address, override])=>{
        return [
            address,
            {
                balance: override.balance ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(override.balance) : undefined,
                nonce: override.nonce ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(override.nonce) : undefined,
                code: override.code,
                state: override.state,
                stateDiff: override.stateDiff
            }
        ];
    }));
}
async function eth_call(request, params) {
    const { blockNumber, blockTag, ...txRequest } = params;
    const blockNumberHex = blockNumber ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["numberToHex"])(blockNumber) : undefined;
    // default to "latest" if no block is provided
    const block = blockNumberHex || blockTag || "latest";
    return await request({
        method: "eth_call",
        params: params.stateOverrides ? [
            txRequest,
            block,
            encodeStateOverrides(params.stateOverrides)
        ] : [
            txRequest,
            block
        ]
    });
} //# sourceMappingURL=eth_call.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Sends a raw transaction to the Ethereum network.
 * @param request - The EIP1193 request function.
 * @param signedTransaction - The signed transaction in hex format.
 * @returns A promise that resolves to the transaction hash.
 * @rpc
 * @example
 * ```ts
 * import { getRpcClient, eth_sendRawTransaction } from "thirdweb/rpc";
 * const rpcRequest = getRpcClient({ client, chain });
 * const transactionHash = await eth_sendRawTransaction(rpcRequest, "0x...");
 * ```
 */ __turbopack_context__.s({
    "eth_sendRawTransaction": (()=>eth_sendRawTransaction)
});
async function eth_sendRawTransaction(request, signedTransaction) {
    return await request({
        method: "eth_sendRawTransaction",
        params: [
            signedTransaction
        ]
    });
} //# sourceMappingURL=eth_sendRawTransaction.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_getBalance.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "eth_getBalance": (()=>eth_getBalance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/encoding/hex.js [app-client] (ecmascript) <locals>");
;
async function eth_getBalance(request, params) {
    const hexBalance = await request({
        method: "eth_getBalance",
        params: [
            params.address,
            params.blockTag || "latest"
        ]
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$encoding$2f$hex$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["hexToBigInt"])(hexBalance);
} //# sourceMappingURL=eth_getBalance.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/gas/get-gas-price.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getGasPrice": (()=>getGasPrice)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_gasPrice$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_gasPrice.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript)");
;
;
async function getGasPrice(options) {
    const { client, chain, percentMultiplier } = options;
    const rpcClient = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])({
        client,
        chain
    });
    const gasPrice_ = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_gasPrice$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eth_gasPrice"])(rpcClient);
    const extraTip = percentMultiplier ? gasPrice_ / BigInt(100) * BigInt(percentMultiplier) : 0n;
    const txGasPrice = gasPrice_ + extraTip;
    return txGasPrice;
} //# sourceMappingURL=get-gas-price.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/gas/op-gas-fee-reducer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Via: https://twitter.com/0xjustadev/status/1758973668011434062
 *
 * Increases the gas fee value to the nearest power of 2.
 * If the value is already a power of 2 or 0, it returns the value as is.
 * Otherwise, it finds the highest power of 2 that is bigger than the given value.
 * @param value - The gas fee value to be "rounded up".
 * @returns The *increased* gas value which will result in a lower L1 gas fee, overall reducing the gas fee.
 * @internal
 */ __turbopack_context__.s({
    "roundUpGas": (()=>roundUpGas)
});
function roundUpGas(value) {
    if (value === 0n || (value & value - 1n) === 0n) {
        return value;
    }
    // Find the highest set bit by shifting until the value is 0.
    let highestBit = 1n;
    while(value > 0n){
        // biome-ignore lint/style/noParameterAssign: the whole point is that we modify the value in palce
        value >>= 1n;
        highestBit <<= 1n;
    }
    return highestBit;
} //# sourceMappingURL=op-gas-fee-reducer.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/gas/fee-data.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getDefaultGasOverrides": (()=>getDefaultGasOverrides),
    "getGasOverridesForTransaction": (()=>getGasOverridesForTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_getBlockByNumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_getBlockByNumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_maxPriorityFeePerGas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/actions/eth_maxPriorityFeePerGas.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/rpc/rpc.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/resolve-promised-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/units.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$get$2d$gas$2d$price$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/get-gas-price.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/gas/op-gas-fee-reducer.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
// for these chains - always force pre eip1559 transactions
const FORCE_GAS_PRICE_CHAIN_IDS = [
    78600,
    2040,
    248,
    9372,
    841,
    842,
    2016,
    9768,
    2442,
    1942999413,
    1952959480,
    994873017,
    19011,
    40875,
    1511670449,
    5464,
    2020,
    2021
];
async function getGasOverridesForTransaction(transaction) {
    // first check for explicit values
    const [maxFeePerGas, maxPriorityFeePerGas, gasPrice, type] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.maxFeePerGas),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.maxPriorityFeePerGas),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.gasPrice),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$resolve$2d$promised$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolvePromisedValue"])(transaction.type)
    ]);
    // Exit early if the user explicitly provided enough options
    if (maxFeePerGas !== undefined && maxPriorityFeePerGas !== undefined) {
        return {
            maxFeePerGas,
            maxPriorityFeePerGas
        };
    }
    if (typeof gasPrice === "bigint") {
        return {
            gasPrice
        };
    }
    // If we don't have enough explicit values, get defaults
    const defaultGasOverrides = await getDefaultGasOverrides(transaction.client, transaction.chain, type === "legacy" ? "legacy" : "eip1559");
    if (transaction.chain.experimental?.increaseZeroByteCount) {
        // otherwise adjust each value
        if (defaultGasOverrides.gasPrice) {
            return {
                gasPrice: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundUpGas"])(defaultGasOverrides.gasPrice)
            };
        }
        return {
            maxFeePerGas: maxFeePerGas ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundUpGas"])(defaultGasOverrides.maxFeePerGas ?? 0n),
            maxPriorityFeePerGas: maxPriorityFeePerGas ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$op$2d$gas$2d$fee$2d$reducer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["roundUpGas"])(defaultGasOverrides.maxPriorityFeePerGas ?? 0n)
        };
    }
    // return as is
    if (defaultGasOverrides.gasPrice !== undefined) {
        return defaultGasOverrides;
    }
    // Still check for explicit values in case one is provided and not the other
    return {
        maxFeePerGas: maxFeePerGas ?? defaultGasOverrides.maxFeePerGas,
        maxPriorityFeePerGas: maxPriorityFeePerGas ?? defaultGasOverrides.maxPriorityFeePerGas
    };
}
async function getDefaultGasOverrides(client, chain, feeType) {
    // give priority to the transaction fee type over the chain fee type
    const resolvedFeeType = feeType ?? chain.feeType;
    // if chain is configured to force legacy transactions or is in the legacy chain list
    if (resolvedFeeType === "legacy" || FORCE_GAS_PRICE_CHAIN_IDS.includes(chain.id)) {
        return {
            gasPrice: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$get$2d$gas$2d$price$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGasPrice"])({
                client,
                chain,
                percentMultiplier: 10
            })
        };
    }
    const feeData = await getDynamicFeeData(client, chain);
    if (feeData.maxFeePerGas !== null && feeData.maxPriorityFeePerGas !== null) {
        return {
            maxFeePerGas: feeData.maxFeePerGas,
            maxPriorityFeePerGas: feeData.maxPriorityFeePerGas
        };
    }
    // TODO: resolvedFeeType here could be "EIP1559", but we could not get EIP1559 fee data. should we throw?
    return {
        gasPrice: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$gas$2f$get$2d$gas$2d$price$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGasPrice"])({
            client,
            chain,
            percentMultiplier: 10
        })
    };
}
/**
 * Retrieves dynamic fee data for a given chain.
 * @param client - The Thirdweb client.
 * @param chain - The chain ID.
 * @returns A promise that resolves to the fee data.
 * @internal
 */ async function getDynamicFeeData(client, chain, percentMultiplier = 10) {
    let maxFeePerGas = null;
    let maxPriorityFeePerGas_ = null;
    const rpcRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$rpc$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getRpcClient"])({
        client,
        chain
    });
    const [block, maxPriorityFeePerGas] = await Promise.all([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_getBlockByNumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eth_getBlockByNumber"])(rpcRequest, {
            blockTag: "latest"
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$rpc$2f$actions$2f$eth_maxPriorityFeePerGas$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["eth_maxPriorityFeePerGas"])(rpcRequest).catch(()=>null)
    ]);
    const baseBlockFee = block?.baseFeePerGas;
    const chainId = chain.id;
    // flag chain testnet & flag chain
    if (chainId === 220 || chainId === 1220) {
        // these does not support eip-1559, for some reason even though `eth_maxPriorityFeePerGas` is available?!?
        // return null because otherwise TX break
        return {
            maxFeePerGas: null,
            maxPriorityFeePerGas: null
        };
    // mumbai & polygon
    }
    if (chainId === 80002 || chainId === 137) {
        // for polygon, get fee data from gas station
        maxPriorityFeePerGas_ = await getPolygonGasPriorityFee(chainId);
    } else if (maxPriorityFeePerGas !== null) {
        // prioritize fee from eth_maxPriorityFeePerGas
        maxPriorityFeePerGas_ = maxPriorityFeePerGas;
    }
    if (maxPriorityFeePerGas_ == null || baseBlockFee == null) {
        // chain does not support eip-1559, return null for both
        return {
            maxFeePerGas: null,
            maxPriorityFeePerGas: null
        };
    }
    // add 10% tip to maxPriorityFeePerGas for faster processing
    maxPriorityFeePerGas_ = getPreferredPriorityFee(maxPriorityFeePerGas_, percentMultiplier);
    // eip-1559 formula, doubling the base fee ensures that the tx can be included in the next 6 blocks no matter how busy the network is
    // good article on the subject: https://www.blocknative.com/blog/eip-1559-fees
    maxFeePerGas = baseBlockFee * 2n + maxPriorityFeePerGas_;
    // special cased for Celo gas fees
    if (chainId === 42220 || chainId === 44787 || chainId === 62320) {
        maxPriorityFeePerGas_ = maxFeePerGas;
    }
    return {
        maxFeePerGas,
        maxPriorityFeePerGas: maxPriorityFeePerGas_
    };
}
/**
 * Calculates the preferred priority fee based on the default priority fee per gas and a percent multiplier.
 * @param defaultPriorityFeePerGas - The default priority fee per gas.
 * @param percentMultiplier - The percent multiplier to calculate the extra tip. Default is 10.
 * @returns The total priority fee including the extra tip.
 * @internal
 */ function getPreferredPriorityFee(defaultPriorityFeePerGas, percentMultiplier = 10) {
    const extraTip = defaultPriorityFeePerGas / BigInt(100) * BigInt(percentMultiplier);
    const totalPriorityFee = defaultPriorityFeePerGas + extraTip;
    return totalPriorityFee;
}
/**
 * @internal
 */ function getGasStationUrl(chainId) {
    switch(chainId){
        case 137:
            return "https://gasstation.polygon.technology/v2";
        case 80002:
            return "https://gasstation-testnet.polygon.technology/v2";
    }
}
const MIN_POLYGON_GAS_PRICE = 31n; // 31 gwei
/**
 *
 * @returns The gas price
 * @internal
 */ async function getPolygonGasPriorityFee(chainId) {
    const gasStationUrl = getGasStationUrl(chainId);
    try {
        const data = await (await fetch(gasStationUrl)).json();
        // take the standard speed here, SDK options will define the extra tip
        const priorityFee = data.fast.maxPriorityFee;
        if (priorityFee > 0) {
            const fixedFee = Number.parseFloat(priorityFee).toFixed(9);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$units$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toUnits"])(fixedFee, 9);
        }
    } catch (e) {
        console.error("failed to fetch gas", e);
    }
    return MIN_POLYGON_GAS_PRICE;
} //# sourceMappingURL=fee-data.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/storage/mock.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addToMockStorage": (()=>addToMockStorage),
    "getFromMockStorage": (()=>getFromMockStorage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/random.js [app-client] (ecmascript)");
;
const mockStorage = new Map();
async function addToMockStorage(value) {
    const key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$random$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["randomBytesHex"])();
    // Get the first file from FormData
    const files = value.getAll("file");
    if (!files) {
        throw new Error("No file found in FormData");
    }
    // Read file contents
    return Promise.all(files.map(async (file)=>{
        const text = await file.text();
        let data;
        try {
            // Parse the contents as JSON
            data = JSON.parse(text);
        } catch  {
            throw new Error("File contents must be valid JSON");
        }
        // If file has a name, return key/filename format
        const filename = "name" in file && file.name ? file.name.replace("files/", "") : "";
        //   console.log("mockStorage upload", key, data, filename);
        const hash = `${key}${filename ? `/${filename}` : ""}`;
        mockStorage.set(hash, data);
        return `ipfs://${hash}`;
    }));
}
function getFromMockStorage(key) {
    const data = mockStorage.get(key);
    //   console.log("mockStorage get", key, data);
    return data;
} //# sourceMappingURL=mock.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/storage/download.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "download": (()=>download)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ipfs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/ipfs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$mock$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/storage/mock.js [app-client] (ecmascript)");
;
;
;
;
async function download(options) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IS_TEST"]) {
        const hash = options.uri.split("://")[1];
        if (!hash) {
            throw new Error("Invalid hash");
        }
        const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$mock$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFromMockStorage"])(hash);
        if (data) {
            return {
                ok: true,
                status: 200,
                json: ()=>Promise.resolve(data)
            };
        }
    }
    let url;
    if (options.uri.startsWith("ar://")) {
        const { resolveArweaveScheme } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/arweave.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        url = resolveArweaveScheme(options);
    } else {
        url = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$ipfs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["resolveScheme"])(options);
    }
    const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClientFetch"])(options.client)(url, {
        keepalive: options.client.config?.storage?.fetch?.keepalive,
        headers: options.client.config?.storage?.fetch?.headers,
        requestTimeoutMs: options.requestTimeoutMs ?? options.client.config?.storage?.fetch?.requestTimeoutMs ?? 60000
    });
    if (!res.ok) {
        const error = await res.text();
        throw new Error(`Failed to download file: ${res.status} ${res.statusText} ${error || ""}`);
    }
    return res;
} //# sourceMappingURL=download.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/contract/actions/resolve-abi.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "resolveAbiFromBytecode": (()=>resolveAbiFromBytecode),
    "resolveAbiFromContractApi": (()=>resolveAbiFromContractApi),
    "resolveCompositeAbi": (()=>resolveCompositeAbi),
    "resolveContractAbi": (()=>resolveContractAbi)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$formatAbi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/formatAbi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/parseAbi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$chains$2f$definitions$2f$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/chains/definitions/sepolia.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$download$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/storage/download.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$withCache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/withCache.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/contract/contract.js [app-client] (ecmascript)");
;
;
;
;
;
;
function resolveContractAbi(contract, contractApiBaseUrl = "https://contract.thirdweb.com/abi") {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$withCache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withCache"])(async ()=>{
        // if the contract already HAS a user defined we always use that!
        if (contract.abi) {
            return contract.abi;
        }
        // for local chains, we need to resolve the composite abi from bytecode
        if (contract.chain.id === 31337 || contract.chain.id === 1337 || contract.chain.id === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$chains$2f$definitions$2f$sepolia$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sepolia"].id // FIXME remove this once contract API handles 7702 delegation
        ) {
            return await resolveCompositeAbi(contract);
        }
        // try to get it from the api
        try {
            return await resolveAbiFromContractApi(contract, contractApiBaseUrl);
        } catch  {
            // if that fails, try to resolve it from the bytecode
            return await resolveCompositeAbi(contract);
        }
    }, {
        cacheKey: `${contract.chain.id}-${contract.address}`,
        cacheTime: 1000 * 60 * 60 * 1
    });
}
async function resolveAbiFromContractApi(// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any contract type
contract, contractApiBaseUrl = "https://contract.thirdweb.com/abi") {
    const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClientFetch"])(contract.client)(`${contractApiBaseUrl}/${contract.chain.id}/${contract.address}`);
    const json = await response.json();
    if (!json || json.error) {
        throw new Error(`Failed to resolve ABI from contract API. ${json.error || ""}`);
    }
    return json;
}
async function resolveAbiFromBytecode(// biome-ignore lint/suspicious/noExplicitAny: library function that accepts any contract type
contract) {
    const [{ resolveImplementation }, { extractIPFSUri }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/bytecode/resolveImplementation.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/bytecode/extractIPFS.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    const { bytecode } = await resolveImplementation(contract);
    if (bytecode === "0x") {
        const { id, name } = contract.chain;
        throw new Error(`Failed to load contract bytecode. Make sure the contract [${contract.address}] exists on the chain [${name || "Unknown Chain"} (chain id: ${id})]`);
    }
    const ipfsUri = extractIPFSUri(bytecode);
    if (!ipfsUri) {
        // just early exit if we can't find an IPFS URI
        return [];
    }
    try {
        const res = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$storage$2f$download$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["download"])({
            uri: ipfsUri,
            client: contract.client
        });
        const json = await res.json();
        // ABI is at `json.output.abi`
        return json.output.abi;
    } catch  {
        // if we can't resolve the ABI from the IPFS URI, return an empty array
        return [];
    }
}
const PLUGINS_ABI = {
    inputs: [],
    name: "getAllPlugins",
    outputs: [
        {
            components: [
                {
                    internalType: "bytes4",
                    name: "functionSelector",
                    type: "bytes4"
                },
                {
                    internalType: "string",
                    name: "functionSignature",
                    type: "string"
                },
                {
                    internalType: "address",
                    name: "pluginAddress",
                    type: "address"
                }
            ],
            internalType: "struct IPluginMap.Plugin[]",
            name: "registered",
            type: "tuple[]"
        }
    ],
    stateMutability: "view",
    type: "function"
};
const BASE_ROUTER_ABI = {
    inputs: [],
    name: "getAllExtensions",
    outputs: [
        {
            components: [
                {
                    components: [
                        {
                            internalType: "string",
                            name: "name",
                            type: "string"
                        },
                        {
                            internalType: "string",
                            name: "metadataURI",
                            type: "string"
                        },
                        {
                            internalType: "address",
                            name: "implementation",
                            type: "address"
                        }
                    ],
                    internalType: "struct IExtension.ExtensionMetadata",
                    name: "metadata",
                    type: "tuple"
                },
                {
                    components: [
                        {
                            internalType: "bytes4",
                            name: "functionSelector",
                            type: "bytes4"
                        },
                        {
                            internalType: "string",
                            name: "functionSignature",
                            type: "string"
                        }
                    ],
                    internalType: "struct IExtension.ExtensionFunction[]",
                    name: "functions",
                    type: "tuple[]"
                }
            ],
            internalType: "struct IExtension.Extension[]",
            name: "allExtensions",
            type: "tuple[]"
        }
    ],
    stateMutability: "view",
    type: "function"
};
const DIAMOND_ABI = {
    inputs: [],
    name: "facets",
    outputs: [
        {
            components: [
                {
                    internalType: "address",
                    name: "facetAddress",
                    type: "address"
                },
                {
                    internalType: "bytes4[]",
                    name: "functionSelectors",
                    type: "bytes4[]"
                }
            ],
            type: "tuple[]"
        }
    ],
    stateMutability: "view",
    type: "function"
};
async function resolveCompositeAbi(contract, rootAbi, resolveSubAbi) {
    const [rootAbi_, pluginPatternAddresses, baseRouterAddresses, modularExtensionAddresses, diamondFacetAddresses] = await Promise.all([
        rootAbi ? rootAbi : resolveAbiFromBytecode(contract),
        // check these all at the same time
        resolvePluginPatternAddresses(contract),
        resolveBaseRouterAddresses(contract),
        resolveModularModuleAddresses(contract),
        resolveDiamondFacetAddresses(contract)
    ]);
    const mergedPlugins = [
        ...new Set([
            ...pluginPatternAddresses,
            ...baseRouterAddresses,
            ...modularExtensionAddresses,
            ...diamondFacetAddresses
        ])
    ];
    // no plugins
    if (!mergedPlugins.length) {
        return rootAbi_;
    }
    // get all the abis for the plugins
    const pluginAbis = await getAbisForPlugins({
        contract,
        plugins: mergedPlugins,
        resolveSubAbi
    });
    // join them together
    return joinAbis({
        rootAbi: rootAbi_,
        pluginAbis
    });
}
async function resolvePluginPatternAddresses(contract) {
    try {
        const { readContract } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/read-contract.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const pluginMap = await readContract({
            contract,
            method: PLUGINS_ABI
        });
        // if there are no plugins, return the root ABI
        if (!pluginMap.length) {
            return [];
        }
        // get all the plugin addresses
        return [
            ...new Set(pluginMap.map((item)=>item.pluginAddress))
        ];
    } catch  {
    // no-op, expected because not everything supports this
    }
    return [];
}
async function resolveBaseRouterAddresses(contract) {
    try {
        const { readContract } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/read-contract.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const pluginMap = await readContract({
            contract,
            method: BASE_ROUTER_ABI
        });
        // if there are no plugins, return the root ABI
        if (!pluginMap.length) {
            return [];
        }
        // get all the plugin addresses
        return [
            ...new Set(pluginMap.map((item)=>item.metadata.implementation))
        ];
    } catch  {
    // no-op, expected because not everything supports this
    }
    return [];
}
async function resolveModularModuleAddresses(contract) {
    try {
        const { getInstalledModules } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/modules/__generated__/IModularCore/read/getInstalledModules.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const modules = await getInstalledModules({
            contract
        });
        // if there are no plugins, return the root ABI
        if (!modules.length) {
            return [];
        }
        // get all the plugin addresses
        return [
            ...new Set(modules.map((item)=>item.implementation))
        ];
    } catch  {
    // no-op, expected because not everything supports this
    }
    return [];
}
async function resolveDiamondFacetAddresses(contract) {
    try {
        const { readContract } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/transaction/read-contract.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
        const facets = await readContract({
            contract,
            method: DIAMOND_ABI
        });
        // if there are no facets, return the root ABI
        if (!facets.length) {
            return [];
        }
        // get all the plugin addresses
        return facets.map((item)=>item.facetAddress);
    } catch  {
    // no-op, expected because not everything supports this
    }
    return [];
}
async function getAbisForPlugins(options) {
    return Promise.all(options.plugins.map((pluginAddress)=>{
        const newContract = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getContract"])({
            ...options.contract,
            address: pluginAddress
        });
        // if we have a method passed in that tells us how to resove the sub-api, use that
        if (options.resolveSubAbi) {
            return options.resolveSubAbi(newContract);
        }
        // otherwise default logic
        return resolveAbiFromBytecode(newContract);
    }));
}
function joinAbis(options) {
    let mergedPlugins = options.pluginAbis.flat().filter((item)=>item.type !== "constructor");
    if (options.rootAbi) {
        mergedPlugins = [
            ...options.rootAbi,
            ...mergedPlugins
        ].filter((item)=>item.type !== "fallback" && item.type !== "receive").filter(Boolean);
    }
    // unique by formatting every abi and then throwing them in a set
    // TODO: this may not be super efficient...
    const humanReadableAbi = [
        ...new Set((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$formatAbi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["formatAbi"])(mergedPlugins))
    ];
    // finally parse it back out
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseAbi"])(humanReadableAbi);
} //# sourceMappingURL=resolve-abi.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/event/actions/parse-logs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseEventLogs": (()=>parseEventLogs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$parseEventLogs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/parseEventLogs.js [app-client] (ecmascript)");
;
function parseEventLogs(options) {
    const { logs, events, strict } = options;
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$parseEventLogs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseEventLogs"])({
        logs,
        abi: events.map((e)=>e.abiEvent),
        strict
    });
} //# sourceMappingURL=parse-logs.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/event/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "isAbiEvent": (()=>isAbiEvent)
});
function isAbiEvent(item) {
    return !!(item && typeof item === "object" && "type" in item && item.type === "event");
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/event/prepare-event.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "prepareEvent": (()=>prepareEvent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/abitype/dist/esm/human-readable/parseAbiItem.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeEventTopics$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/abi/encodeEventTopics.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toSignatureHash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__toSignatureHash__as__toEventHash$3e$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/node_modules/viem/_esm/utils/hash/toSignatureHash.js [app-client] (ecmascript) <export toSignatureHash as toEventHash>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$event$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/event/utils.js [app-client] (ecmascript)");
;
;
;
function prepareEvent(options) {
    const { signature } = options;
    let resolvedSignature;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$event$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAbiEvent"])(signature)) {
        resolvedSignature = signature;
    } else {
        resolvedSignature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$abitype$2f$dist$2f$esm$2f$human$2d$readable$2f$parseAbiItem$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["parseAbiItem"])(signature);
    }
    return {
        abiEvent: resolvedSignature,
        hash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$toSignatureHash$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__toSignatureHash__as__toEventHash$3e$__["toEventHash"])(resolvedSignature),
        // @ts-expect-error - TODO: investiagte why this complains, it works fine however
        topics: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeEventTopics$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["encodeEventTopics"])({
            abi: [
                resolvedSignature
            ],
            args: options.filters
        })
    };
} //# sourceMappingURL=prepare-event.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/constants/addresses.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * The address of the native token.
 */ __turbopack_context__.s({
    "NATIVE_TOKEN_ADDRESS": (()=>NATIVE_TOKEN_ADDRESS),
    "ZERO_ADDRESS": (()=>ZERO_ADDRESS),
    "isNativeTokenAddress": (()=>isNativeTokenAddress)
});
const NATIVE_TOKEN_ADDRESS = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
function isNativeTokenAddress(address) {
    return address.toLowerCase() === NATIVE_TOKEN_ADDRESS;
}
const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000"; //# sourceMappingURL=addresses.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/insight/get-transactions.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Get transactions for a wallet
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const transactions = await Insight.getTransactions({
 *   client,
 *   walletAddress: "0x1234567890123456789012345678901234567890",
 *   chains: [sepolia],
 * });
 * ```
 * @insight
 */ __turbopack_context__.s({
    "getTransactions": (()=>getTransactions)
});
async function getTransactions(args) {
    const [{ getV1WalletsByWalletAddressTransactions }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/insight/common.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    await assertInsightEnabled(args.chains);
    const threeMonthsAgoInSeconds = Math.floor((Date.now() - 3 * 30 * 24 * 60 * 60 * 1000) / 1000);
    const { client, walletAddress, chains, queryOptions } = args;
    const defaultQueryOptions = {
        chain: chains.map((chain)=>chain.id),
        filter_block_timestamp_gte: threeMonthsAgoInSeconds,
        limit: 100
    };
    const result = await getV1WalletsByWalletAddressTransactions({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        query: {
            ...defaultQueryOptions,
            ...queryOptions
        },
        path: {
            wallet_address: walletAddress
        }
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    return result.data.data || [];
} //# sourceMappingURL=get-transactions.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/insight/get-nfts.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getContractNFTs": (()=>getContractNFTs),
    "getNFT": (()=>getNFT),
    "getOwnedNFTs": (()=>getOwnedNFTs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/chains/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/contract/contract.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
;
;
;
async function getOwnedNFTs(args) {
    const [{ getV1Nfts }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/insight/common.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/node_modules/viem/_esm/index.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    // TODO (insight): add support for contract address filters
    const { client, chains, ownerAddress, queryOptions } = args;
    await assertInsightEnabled(chains);
    const defaultQueryOptions = {
        chain: chains.map((chain)=>chain.id),
        // metadata: includeMetadata ? "true" : "false", TODO (insight): add support for this
        limit: 50,
        owner_address: ownerAddress
    };
    const result = await getV1Nfts({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        query: {
            ...defaultQueryOptions,
            ...queryOptions
        }
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    const transformedNfts = await transformNFTModel(result.data?.data ?? [], client, ownerAddress);
    return transformedNfts.map((nft)=>({
            ...nft,
            quantityOwned: nft.quantityOwned ?? 1n
        }));
}
async function getContractNFTs(args) {
    const [{ getV1NftsByContractAddress }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/insight/common.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    const { client, chains, contractAddress, includeOwners = true, queryOptions } = args;
    const defaultQueryOptions = {
        chain: chains.map((chain)=>chain.id),
        // metadata: includeMetadata ? "true" : "false", TODO (insight): add support for this
        limit: 50,
        include_owners: includeOwners === true ? "true" : "false"
    };
    await assertInsightEnabled(chains);
    const result = await getV1NftsByContractAddress({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        path: {
            contract_address: contractAddress
        },
        query: {
            ...defaultQueryOptions,
            ...queryOptions
        }
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    return transformNFTModel(result.data?.data ?? [], client);
}
async function getNFT(args) {
    const [{ getV1NftsByContractAddressByTokenId }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/insight/common.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    const { client, chain, contractAddress, tokenId, includeOwners = true, queryOptions } = args;
    await assertInsightEnabled([
        chain
    ]);
    const defaultQueryOptions = {
        chain_id: [
            chain.id
        ],
        include_owners: includeOwners === true ? "true" : "false"
    };
    const result = await getV1NftsByContractAddressByTokenId({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        path: {
            contract_address: contractAddress,
            token_id: tokenId.toString()
        },
        query: {
            ...defaultQueryOptions,
            ...queryOptions
        }
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    const transformedNfts = await transformNFTModel(result.data?.data ?? [], client);
    return transformedNfts?.[0];
}
async function transformNFTModel(nfts, client, ownerAddress) {
    const [{ parseNFT }, { totalSupply }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/nft/parseNft.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    return await Promise.all(nfts.map(async (nft)=>{
        let parsedNft;
        const { contract, extra_metadata, collection, metadata_url, chain_id, token_id, status, balance, token_type, ...rest } = nft;
        let metadataToUse = rest;
        let owners = ownerAddress ? [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(ownerAddress)
        ] : undefined;
        if ("owner_addresses" in rest) {
            const { owner_addresses, ...restWithoutOwnerAddresses } = rest;
            metadataToUse = restWithoutOwnerAddresses;
            owners = owners ?? owner_addresses?.map((o)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddress"])(o));
        }
        const metadata = replaceIPFSGatewayRecursively({
            uri: nft.metadata_url ?? "",
            image: nft.image_url,
            attributes: nft.extra_metadata?.attributes ?? undefined,
            ...metadataToUse
        });
        if (contract?.type === "erc1155") {
            // TODO (insight): this needs to be added in the API
            const supply = await totalSupply({
                contract: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$contract$2f$contract$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getContract"])({
                    address: contract.address,
                    chain: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$chains$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getCachedChain"])(contract.chain_id),
                    client: client
                }),
                id: BigInt(token_id)
            }).catch(()=>0n);
            parsedNft = parseNFT(metadata, {
                tokenId: BigInt(token_id),
                tokenUri: replaceIPFSGateway(metadata_url) ?? "",
                type: "ERC1155",
                owner: owners?.[0],
                tokenAddress: contract?.address ?? "",
                chainId: contract?.chain_id ?? 0,
                supply: supply
            });
        } else {
            parsedNft = parseNFT(metadata, {
                tokenId: BigInt(token_id),
                type: "ERC721",
                owner: owners?.[0],
                tokenUri: replaceIPFSGateway(metadata_url) ?? "",
                tokenAddress: contract?.address ?? "",
                chainId: contract?.chain_id ?? 0
            });
        }
        return {
            ...parsedNft,
            ...contract?.type === "erc1155" ? {
                quantityOwned: balance ? BigInt(balance) : undefined
            } : {}
        };
    }));
}
// biome-ignore lint/suspicious/noExplicitAny: this should be fixed in the API
function replaceIPFSGatewayRecursively(obj) {
    if (typeof obj !== "object" || obj === null) {
        return obj;
    }
    for(const key in obj){
        if (typeof obj[key] === "string") {
            obj[key] = replaceIPFSGateway(obj[key]);
        } else {
            replaceIPFSGatewayRecursively(obj[key]);
        }
    }
    return obj;
}
function replaceIPFSGateway(url) {
    if (!url || typeof url !== "string") {
        return url;
    }
    try {
        const parsedUrl = new URL(url);
        if (parsedUrl.host.endsWith(".ipfscdn.io")) {
            const paths = parsedUrl.pathname.split("/");
            const index = paths.findIndex((path)=>path === "ipfs");
            if (index === -1) {
                return url;
            }
            const ipfsHash = paths.slice(index + 1).join("/");
            if (ipfsHash) {
                return `ipfs://${ipfsHash}`;
            }
            return url;
        }
    } catch  {
        // If the URL is invalid, return it as is
        return url;
    }
    return url;
} //# sourceMappingURL=get-nfts.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/insight/get-tokens.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Get ERC20 tokens owned by an address
 * @example
 * ```ts
 * import { Insight } from "thirdweb";
 *
 * const tokens = await Insight.getOwnedTokens({
 *   client,
 *   chains: [sepolia],
 *   ownerAddress: "0x1234567890123456789012345678901234567890",
 * });
 * ```
 * @insight
 */ __turbopack_context__.s({
    "getOwnedTokens": (()=>getOwnedTokens)
});
async function getOwnedTokens(args) {
    const [{ getV1TokensErc20ByOwnerAddress }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify }] = await Promise.all([
        __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/insight/common.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i),
        __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/json.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)
    ]);
    const { client, chains, ownerAddress, queryOptions } = args;
    await assertInsightEnabled(chains);
    const defaultQueryOptions = {
        chain: chains.map((chain)=>chain.id),
        include_spam: "false",
        metadata: "true",
        limit: 50
    };
    const result = await getV1TokensErc20ByOwnerAddress({
        baseUrl: `https://${getThirdwebDomains().insight}`,
        fetch: getClientFetch(client),
        path: {
            ownerAddress: ownerAddress
        },
        query: {
            ...defaultQueryOptions,
            ...queryOptions
        }
    });
    if (result.error) {
        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : "Unknown error"}`);
    }
    return transformOwnedToken(result.data?.data ?? []);
}
async function transformOwnedToken(token) {
    const { toTokens } = await __turbopack_context__.r("[project]/node_modules/thirdweb/dist/esm/utils/units.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i);
    return token.map((t)=>{
        const decimals = t.decimals ?? 18;
        const value = BigInt(t.balance);
        return {
            value,
            displayValue: toTokens(value, decimals),
            tokenAddress: t.token_address,
            chainId: t.chain_id,
            decimals,
            symbol: t.symbol ?? "",
            name: t.name ?? ""
        };
    });
} //# sourceMappingURL=get-tokens.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/social/profiles.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getSocialProfiles": (()=>getSocialProfiles)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$domains$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript)");
;
;
async function getSocialProfiles(args) {
    const { address, client } = args;
    const clientFetch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClientFetch"])(client);
    const response = await clientFetch(`${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$domains$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getThirdwebBaseUrl"])("social")}/v1/profiles/${address}`);
    if (!response.ok) {
        const errorBody = await response.text().catch(()=>"Unknown error");
        throw new Error(`Failed to fetch profile: ${response.status} ${response.statusText} - ${errorBody}`);
    }
    return (await response.json()).data;
} //# sourceMappingURL=profiles.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/bridge/types/Errors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ApiError": (()=>ApiError)
});
class ApiError extends Error {
    constructor(args){
        super(args.message);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "correlationId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "statusCode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.code = args.code;
        this.correlationId = args.correlationId;
        this.statusCode = args.statusCode;
    }
} //# sourceMappingURL=Errors.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/bridge/Token.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "tokens": (()=>tokens)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$domains$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/domains.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/fetch.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$bridge$2f$types$2f$Errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/bridge/types/Errors.js [app-client] (ecmascript)");
;
;
;
async function tokens(options) {
    const { client, chainId, tokenAddress, symbol, name, limit, offset } = options;
    const clientFetch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$fetch$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getClientFetch"])(client);
    const url = new URL(`${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$domains$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getThirdwebBaseUrl"])("bridge")}/v1/tokens`);
    if (chainId !== null && chainId !== undefined) {
        url.searchParams.set("chainId", chainId.toString());
    }
    if (tokenAddress) {
        url.searchParams.set("tokenAddress", tokenAddress);
    }
    if (symbol) {
        url.searchParams.set("symbol", symbol);
    }
    if (name) {
        url.searchParams.set("name", name);
    }
    if (limit !== undefined) {
        url.searchParams.set("limit", limit.toString());
    }
    if (offset !== null && offset !== undefined) {
        url.searchParams.set("offset", offset.toString());
    }
    const response = await clientFetch(url.toString());
    if (!response.ok) {
        const errorJson = await response.json();
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$bridge$2f$types$2f$Errors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ApiError"]({
            code: errorJson.code || "UNKNOWN_ERROR",
            message: errorJson.message || response.statusText,
            correlationId: errorJson.correlationId || undefined,
            statusCode: response.status
        });
    }
    const { data } = await response.json();
    return data;
} //# sourceMappingURL=Token.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/pay/convert/get-token.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getTokenPrice": (()=>getTokenPrice)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$bridge$2f$Token$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/bridge/Token.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$withCache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/promise/withCache.js [app-client] (ecmascript)");
;
;
async function getTokenPrice(client, tokenAddress, chainId) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$promise$2f$withCache$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["withCache"])(async ()=>{
        const result = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$bridge$2f$Token$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tokens"])({
            client,
            tokenAddress,
            chainId
        });
        return result[0]?.priceUsd;
    }, {
        cacheKey: `get-token-price-${tokenAddress}-${chainId}`,
        cacheTime: 1000 * 60
    });
} //# sourceMappingURL=get-token.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/pay/convert/cryptoToFiat.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "convertCryptoToFiat": (()=>convertCryptoToFiat)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/utils/address.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$pay$2f$convert$2f$get$2d$token$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/thirdweb/dist/esm/pay/convert/get-token.js [app-client] (ecmascript)");
;
;
async function convertCryptoToFiat(options) {
    const { client, fromTokenAddress, chain, fromAmount } = options;
    if (Number(fromAmount) === 0) {
        return {
            result: 0
        };
    }
    // Testnets just don't work with our current provider(s)
    if (chain.testnet === true) {
        throw new Error(`Cannot fetch price for a testnet (chainId: ${chain.id})`);
    }
    // Some provider that we are using will return `0` for unsupported token
    // so we should do some basic input validations before sending the request
    // Make sure it's a valid EVM address
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$utils$2f$address$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAddress"])(fromTokenAddress)) {
        throw new Error("Invalid fromTokenAddress. Expected a valid EVM contract address");
    }
    const price = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$thirdweb$2f$dist$2f$esm$2f$pay$2f$convert$2f$get$2d$token$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTokenPrice"])(client, fromTokenAddress, chain.id);
    if (!price) {
        throw new Error(`Error: Failed to fetch price for token ${fromTokenAddress} on chainId: ${chain.id}`);
    }
    return {
        result: price * fromAmount
    };
} //# sourceMappingURL=cryptoToFiat.js.map
}}),
"[project]/node_modules/thirdweb/dist/esm/pay/convert/type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getFiatSymbol": (()=>getFiatSymbol)
});
const SUPPORTED_FIAT_CURRENCIES = [
    "USD",
    "CAD",
    "GBP",
    "EUR",
    "JPY",
    "AUD",
    "NZD"
];
function getFiatSymbol(showBalanceInFiat) {
    switch(showBalanceInFiat){
        case "USD":
            return "$";
        case "CAD":
            return "$";
        case "GBP":
            return "£";
        case "EUR":
            return "€";
        case "JPY":
            return "¥";
        case "AUD":
            return "$";
        case "NZD":
            return "$";
        default:
            return "$";
    }
} //# sourceMappingURL=type.js.map
}}),
}]);

//# sourceMappingURL=node_modules_thirdweb_dist_esm_35578d1a._.js.map